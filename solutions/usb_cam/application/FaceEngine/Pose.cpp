
#include "Pose.h"
#include <math.h>
#include <string.h>
#include "Matd.h"

#ifndef M_PI
#define M_PI			3.14159265358979323846f
#endif

#define NUMBER_MODES	(34)
#define NUMBER_POINTS	(68) //204/3
#define NUM_DIR			(6)

typedef struct _tagPOINT2Df
{
	float rX;
	float rY;
} POINT2Df;

typedef struct _tagMODEL2Df
{
	int nNodeNum;
	POINT2Df pxNodes[78];
} MODEL2Df;

static float mean_shape_mat_[] = {
	-73.393523f, -72.775014f, -70.533638f, -66.850058f, -59.790187f, -48.368973f, -34.121101f, -17.875411f, 0.098749f, 17.477031f, 32.648966f, 46.372358f, 57.343480f, 64.388482f, 68.212038f, 70.486405f, 71.375822f, -61.119406f, -51.287588f, -37.804800f, -24.022754f, -11.635713f, 12.056636f, 25.106256f, 38.338588f, 51.191007f, 60.053851f, 0.653940f, 0.804809f, 0.992204f, 1.226783f, -14.772472f, -7.180239f, 0.555920f, 8.272499f, 15.214351f, -46.047290f, -37.674688f, -27.883856f, -19.648268f, -28.272965f, -38.082418f, 19.265868f, 27.894191f, 37.437529f, 45.170805f, 38.196454f, 28.764989f, -28.916267f, -17.533194f, -6.684590f, 0.381001f, 8.375443f, 18.876618f, 28.794412f, 19.057574f, 8.956375f, 0.381549f, -7.428895f, -18.160634f, -24.377490f, -6.897633f, 0.340663f, 8.444722f, 24.474473f, 8.449166f, 0.205322f, -7.198266f,
	-29.801432f, -10.949766f, 7.929818f, 26.074280f, 42.564390f, 56.481080f, 67.246992f, 75.056892f, 77.061286f, 74.758448f, 66.929021f, 56.311389f, 42.419126f, 25.455880f, 6.990805f, -11.666193f, -30.365191f, -49.361602f, -58.769795f, -61.996155f, -61.033399f, -56.686759f, -57.391033f, -61.902186f, -62.777713f, -59.302347f, -50.190255f, -42.193790f, -30.993721f, -19.944596f, -8.414541f, 2.598255f, 4.751589f, 6.562900f, 4.661005f, 2.643046f, -37.471411f, -42.730510f, -42.711517f, -36.754742f, -35.134493f, -34.919043f, -37.032306f, -43.342445f, -43.110822f, -38.086515f, -35.532024f, -35.484289f, 28.612716f, 22.172187f, 19.029051f, 20.721118f, 19.035460f, 22.394109f, 28.079924f, 36.298248f, 39.634575f, 40.395647f, 39.836405f, 36.677899f, 28.677771f, 25.475976f, 26.014269f, 25.326198f, 28.323008f, 30.596216f, 31.408738f, 30.844876f,
	47.667532f, 45.909403f, 44.842580f, 43.141114f, 38.635298f, 30.750622f, 18.456453f, 3.609035f, -0.881698f, 5.181201f, 19.176563f, 30.770570f, 37.628629f, 40.886309f, 42.281449f, 44.142567f, 47.140426f, 14.254422f, 7.268147f, 0.442051f, -6.606501f, -11.967398f, -12.051204f, -7.315098f, -1.022953f, 5.349435f, 11.615746f, -13.380835f, -21.150853f, -29.284036f, -36.948060f, -20.132003f, -23.536684f, -25.944448f, -23.695741f, -20.858157f, 7.037989f, 3.021217f, 1.353629f, -0.111088f, -0.147273f, 1.476612f, -0.665746f, 0.247660f, 1.696435f, 4.894163f, 0.282961f, -1.172675f, -2.240310f, -15.934335f, -22.611355f, -23.748437f, -22.721995f, -15.610679f, -3.217393f, -14.987997f, -22.554245f, -23.591626f, -22.406106f, -15.121907f, -4.785684f, -20.893742f, -22.220479f, -21.025520f, -5.712776f, -20.671489f, -21.903670f, -20.328022f
};

static float princ_comp_mat_[] = {
	-0.007395f, -0.093690f, 0.039362f, 0.204443f, -0.104698f, 0.033568f, -0.090173f, 0.010170f, -0.042341f, 0.104375f, 0.032695f, 0.038750f, 0.064385f, -0.037025f, 0.058377f, 0.032457f, -0.100005f, -0.082042f, -0.053440f, 0.008782f, -0.027164f, -0.000368f, -0.129614f, 0.035436f, -0.062685f, -0.075349f, 0.140764f, -0.032290f, -0.115829f, -0.037865f, 0.068590f, 0.008886f, -0.066442f, 0.259211f,
	-0.002553f, -0.075344f, 0.037127f, 0.201967f, -0.069124f, 0.041645f, -0.100939f, 0.018352f, 0.006598f, 0.081569f, 0.004894f, 0.038886f, 0.050631f, 0.056656f, 0.055353f, -0.028457f, -0.022518f, -0.089693f, -0.079196f, 0.010851f, -0.017583f, 0.015095f, -0.077834f, -0.000944f, -0.104255f, -0.060338f, 0.106169f, -0.065799f, -0.067068f, -0.051588f, 0.080490f, 0.063152f, -0.047531f, 0.178216f,
	-0.002097f, -0.055385f, 0.025705f, 0.215785f, -0.026274f, 0.053548f, -0.086364f, 0.041926f, 0.035784f, 0.033485f, -0.014602f, 0.049999f, 0.031950f, 0.125201f, 0.045372f, -0.064200f, 0.070073f, -0.074313f, -0.083942f, -0.007566f, -0.003666f, 0.034226f, -0.018354f, -0.011639f, -0.084633f, -0.039431f, 0.064057f, -0.056515f, -0.046926f, -0.074699f, 0.073477f, 0.074109f, -0.054882f, 0.046675f,
	-0.005533f, -0.035821f, 0.019787f, 0.226957f, 0.030415f, 0.059508f, -0.051058f, 0.057386f, 0.023240f, -0.025487f, -0.013088f, 0.043330f, 0.025141f, 0.113119f, 0.017370f, -0.071064f, 0.108140f, -0.049138f, -0.043417f, -0.065375f, 0.012959f, 0.070483f, 0.075536f, -0.035685f, -0.005847f, 0.012618f, 0.040297f, -0.049743f, -0.061354f, -0.087164f, 0.033762f, 0.048771f, -0.096563f, -0.045189f,
	-0.006914f, 0.011987f, 0.030022f, 0.205560f, 0.099633f, 0.072384f, -0.008313f, 0.060244f, -0.006584f, -0.104943f, -0.018036f, 0.032806f, 0.029879f, 0.068434f, -0.043721f, -0.052564f, 0.077505f, -0.062192f, 0.026865f, -0.122834f, -0.001529f, 0.064443f, 0.160557f, -0.036750f, 0.124476f, 0.072641f, 0.048609f, -0.043443f, -0.060729f, -0.040443f, -0.050540f, 0.050509f, -0.118886f, -0.146867f,
	-0.004182f, 0.064263f, 0.036886f, 0.149341f, 0.158261f, 0.075501f, 0.030568f, 0.067074f, -0.040268f, -0.167116f, -0.020230f, 0.029360f, 0.046726f, 0.033410f, -0.121685f, -0.004528f, -0.017505f, -0.050390f, 0.063237f, -0.133203f, -0.070794f, 0.005133f, 0.178032f, -0.002768f, 0.153446f, 0.105966f, 0.061693f, 0.011010f, -0.027442f, 0.001944f, -0.103967f, 0.045708f, -0.083197f, -0.172889f,
	0.016954f, 0.088125f, 0.034199f, 0.081242f, 0.170872f, 0.048964f, 0.063434f, 0.083842f, -0.058188f, -0.164769f, -0.012135f, 0.002128f, 0.084787f, -0.009691f, -0.136231f, 0.068411f, -0.091616f, 0.042046f, 0.053339f, -0.068859f, -0.141834f, -0.040710f, 0.017020f, 0.034007f, 0.053187f, 0.096749f, 0.068416f, 0.075079f, 0.038728f, 0.063588f, -0.109581f, 0.007737f, 0.033105f, -0.152075f,
	0.021733f, 0.081042f, 0.015310f, 0.029492f, 0.112212f, 0.012959f, 0.065003f, 0.095565f, -0.047228f, -0.120559f, -0.022904f, -0.051461f, 0.036411f, -0.036990f, -0.101765f, 0.150918f, -0.102123f, 0.163128f, 0.047199f, 0.037063f, -0.223718f, -0.065303f, -0.149191f, -0.017823f, -0.134138f, 0.084419f, 0.010718f, 0.087970f, 0.043030f, 0.040099f, -0.068487f, -0.008773f, 0.077035f, -0.082281f,
	0.024713f, 0.084952f, 0.002319f, -0.002792f, 0.028194f, -0.016856f, 0.036083f, 0.087381f, -0.020743f, -0.024386f, -0.027268f, -0.091654f, -0.009025f, -0.052124f, -0.033407f, 0.168353f, -0.061447f, 0.244847f, 0.024587f, 0.064221f, -0.161138f, 0.020993f, -0.164584f, -0.068179f, -0.181775f, 0.087509f, -0.068202f, 0.059078f, -0.004250f, -0.001472f, -0.031248f, -0.049011f, -0.019415f, 0.022163f,
	0.025404f, 0.095704f, -0.013447f, -0.036864f, -0.064015f, -0.035962f, 0.001144f, 0.050101f, 0.006172f, 0.084003f, -0.015860f, -0.102295f, -0.028308f, -0.053076f, 0.017520f, 0.110370f, -0.009494f, 0.248830f, -0.017769f, 0.064655f, -0.062487f, 0.133872f, -0.077193f, -0.077102f, -0.104610f, 0.084923f, -0.116710f, -0.000424f, -0.001453f, -0.001504f, -0.004986f, -0.072792f, -0.151917f, 0.063339f,
	0.027234f, 0.088446f, -0.037011f, -0.090962f, -0.124015f, -0.052844f, -0.020061f, 0.017974f, 0.031824f, 0.138013f, -0.009523f, -0.093892f, -0.061812f, -0.016350f, 0.043025f, 0.034106f, 0.036403f, 0.177560f, -0.066137f, 0.039288f, 0.041972f, 0.145398f, -0.004524f, -0.021113f, 0.025045f, 0.065780f, -0.102128f, -0.061053f, 0.010043f, -0.018688f, 0.018733f, -0.002990f, -0.240304f, 0.007274f,
	0.033301f, 0.051083f, -0.050161f, -0.137239f, -0.130410f, -0.078352f, -0.030467f, -0.016581f, 0.042916f, 0.153230f, -0.008295f, -0.048519f, -0.056020f, -0.017449f, 0.051644f, -0.021078f, 0.049456f, 0.042549f, -0.075780f, 0.051205f, 0.057200f, 0.117965f, 0.058462f, 0.078890f, 0.121853f, 0.027311f, -0.037081f, -0.082100f, 0.013948f, 0.019188f, 0.029703f, 0.076102f, -0.243643f, -0.067711f,
	0.034561f, -0.024817f, -0.037181f, -0.171731f, -0.091823f, -0.080914f, -0.018022f, -0.019280f, 0.055534f, 0.112038f, -0.006388f, 0.000380f, -0.027767f, -0.031689f, 0.027915f, -0.012644f, 0.004351f, -0.072270f, -0.053990f, 0.028620f, 0.011428f, 0.077628f, 0.073278f, 0.159948f, 0.096141f, 0.006855f, 0.036568f, -0.013290f, -0.001587f, 0.033748f, 0.052795f, 0.164287f, -0.166678f, -0.098685f,
	0.031311f, -0.094373f, -0.015266f, -0.181991f, -0.032285f, -0.067979f, 0.020822f, -0.028457f, 0.050194f, 0.060652f, 0.006169f, 0.060618f, 0.005717f, -0.047184f, 0.006512f, 0.012425f, -0.059877f, -0.141325f, -0.029145f, -0.010906f, -0.069894f, 0.032082f, 0.054382f, 0.151384f, 0.041519f, 0.026929f, 0.076049f, 0.067107f, -0.027885f, 0.040313f, 0.041582f, 0.194576f, -0.086531f, -0.080338f,
	0.030327f, -0.127857f, -0.008012f, -0.166922f, 0.025066f, -0.062660f, 0.063753f, -0.029802f, 0.044933f, 0.028298f, 0.025152f, 0.109179f, 0.013585f, -0.043385f, 0.003918f, 0.007538f, -0.080941f, -0.141969f, 0.011067f, -0.055727f, -0.099322f, -0.018025f, 0.009874f, 0.065510f, -0.019589f, 0.084273f, 0.059580f, 0.099232f, -0.026102f, 0.043042f, 0.023322f, 0.151827f, -0.031702f, -0.023000f,
	0.030239f, -0.141766f, -0.020490f, -0.154724f, 0.073176f, -0.066098f, 0.076339f, -0.045120f, 0.049403f, -0.014474f, 0.024782f, 0.109864f, 0.005943f, -0.008921f, 0.001482f, -0.008304f, -0.060453f, -0.100507f, 0.030769f, -0.093919f, -0.042422f, -0.045051f, -0.014060f, -0.020183f, -0.093279f, 0.134797f, 0.006048f, 0.040717f, -0.038709f, 0.039630f, 0.006137f, 0.076303f, 0.021244f, 0.014680f,
	0.030493f, -0.158938f, -0.031460f, -0.156567f, 0.120023f, -0.070626f, 0.084879f, -0.065759f, 0.063746f, -0.047728f, -0.002344f, 0.094855f, -0.013995f, 0.014159f, 0.011125f, -0.034394f, -0.064702f, -0.055871f, 0.041269f, -0.110361f, 0.045722f, -0.064289f, -0.013213f, -0.104140f, -0.133226f, 0.183607f, -0.037284f, 0.002311f, -0.041808f, 0.033510f, -0.034315f, 0.012710f, 0.065609f, 0.046794f,
	-0.029307f, -0.000612f, 0.006003f, 0.066897f, -0.126329f, 0.008282f, 0.106455f, -0.058070f, -0.127455f, 0.112217f, 0.028721f, -0.008227f, 0.023123f, -0.184660f, -0.000131f, 0.060814f, -0.038192f, 0.061802f, 0.055924f, -0.086767f, -0.011372f, 0.116214f, 0.039681f, -0.047083f, 0.046626f, 0.042705f, 0.011194f, -0.002237f, 0.023832f, 0.021378f, 0.074731f, -0.040608f, -0.025003f, 0.203421f,
	-0.038458f, 0.020813f, -0.004500f, 0.021759f, -0.086203f, 0.017004f, 0.123118f, -0.051398f, -0.154096f, 0.048594f, 0.160783f, 0.035847f, -0.105209f, -0.131283f, -0.034334f, 0.088202f, -0.022053f, 0.065794f, 0.043514f, -0.164773f, 0.038562f, 0.221823f, -0.008980f, 0.076251f, -0.067806f, 0.014541f, 0.027230f, -0.014379f, -0.016754f, -0.010835f, 0.026126f, -0.010414f, 0.029183f, 0.058614f,
	-0.021490f, 0.036216f, -0.005865f, 0.020024f, -0.060804f, 0.026512f, 0.126241f, -0.083197f, -0.120419f, 0.032472f, 0.187630f, -0.015555f, -0.159327f, -0.011903f, -0.087082f, 0.079345f, -0.061540f, 0.015194f, 0.062573f, -0.039469f, 0.032277f, 0.191416f, 0.026454f, 0.082398f, -0.056523f, -0.017131f, 0.027510f, -0.008610f, 0.004494f, -0.034043f, -0.017450f, 0.006765f, 0.078634f, -0.036122f,
	0.000867f, 0.042636f, 0.003104f, 0.029552f, -0.036234f, 0.016402f, 0.123844f, -0.126971f, -0.075012f, 0.060293f, 0.148833f, -0.081953f, -0.173218f, 0.088994f, -0.136465f, 0.063644f, -0.092909f, -0.034989f, 0.083554f, 0.107321f, 0.022452f, 0.121649f, 0.095422f, 0.064093f, -0.044127f, -0.041514f, -0.001734f, -0.007934f, 0.040275f, -0.042178f, -0.037676f, 0.021143f, 0.091871f, -0.056272f,
	0.024120f, 0.058528f, 0.006018f, 0.028610f, -0.012243f, 0.008813f, 0.097121f, -0.159602f, -0.017056f, 0.077811f, 0.087002f, -0.120528f, -0.150197f, 0.184860f, -0.180434f, 0.040369f, -0.097894f, -0.042266f, 0.075094f, 0.203623f, 0.039492f, 0.033806f, 0.132455f, 0.059185f, -0.102173f, -0.071020f, -0.051542f, 0.002257f, 0.073697f, -0.021845f, -0.035627f, 0.009661f, 0.123071f, -0.065039f,
	-0.056420f, 0.059125f, -0.030321f, -0.057038f, 0.055493f, -0.007116f, -0.126529f, 0.019949f, -0.058614f, -0.078223f, 0.002145f, 0.050900f, 0.167834f, -0.173333f, 0.181067f, -0.004047f, 0.063488f, 0.151506f, -0.125850f, -0.136067f, 0.023547f, 0.034287f, -0.056834f, 0.003824f, 0.134406f, -0.055792f, 0.087938f, 0.068804f, -0.033240f, 0.076407f, -0.033551f, -0.097730f, 0.084249f, -0.079917f,
	-0.038591f, 0.041658f, -0.021071f, -0.054808f, 0.085131f, -0.020672f, -0.150923f, -0.028119f, -0.005051f, -0.082123f, -0.027470f, 0.004437f, 0.151800f, -0.139134f, 0.205779f, 0.055682f, 0.024516f, 0.096154f, -0.038417f, -0.113849f, 0.045637f, 0.075165f, -0.039525f, 0.011140f, 0.058496f, -0.061165f, 0.070389f, 0.031381f, -0.020956f, 0.065917f, -0.033395f, -0.096762f, 0.067056f, 0.005758f,
	-0.007940f, 0.026461f, -0.003035f, -0.037585f, 0.112114f, -0.032320f, -0.154598f, -0.070183f, 0.034104f, -0.066949f, -0.048103f, -0.076036f, 0.108505f, -0.081056f, 0.189128f, 0.100712f, 0.001290f, 0.009722f, 0.046728f, -0.023127f, 0.013390f, 0.076873f, 0.012671f, 0.031037f, 0.075639f, -0.064473f, 0.061414f, -0.019564f, 0.014597f, 0.046786f, -0.011485f, -0.084927f, -0.000334f, 0.061175f,
	0.018946f, -0.000145f, 0.011179f, -0.029672f, 0.136914f, -0.030086f, -0.147824f, -0.105721f, 0.066935f, -0.079902f, -0.036968f, -0.110909f, 0.052283f, 0.004188f, 0.126896f, 0.134626f, -0.006676f, -0.052490f, 0.091685f, 0.063396f, -0.013036f, 0.002970f, 0.053049f, 0.019284f, 0.038579f, -0.025497f, 0.025340f, -0.089926f, 0.050450f, -0.006666f, -0.013118f, -0.030505f, -0.058633f, 0.064143f,
	0.026629f, -0.059165f, -0.000823f, -0.058599f, 0.151849f, -0.022073f, -0.130501f, -0.084385f, 0.071751f, -0.134872f, 0.039773f, -0.057794f, -0.044027f, 0.076494f, 0.035989f, 0.101529f, 0.005315f, -0.029779f, 0.032498f, 0.028803f, 0.005618f, -0.063529f, -0.004924f, -0.022183f, -0.113427f, 0.055922f, -0.008186f, -0.140830f, 0.090960f, -0.114112f, -0.009417f, 0.083947f, -0.041032f, -0.006371f,
	-0.010951f, 0.075350f, -0.001817f, -0.012876f, 0.013096f, 0.004579f, -0.016153f, -0.047823f, -0.029850f, 0.016150f, 0.033334f, 0.015682f, 0.035621f, 0.037191f, -0.019504f, -0.019256f, 0.044839f, 0.020295f, -0.073131f, 0.039780f, -0.036879f, -0.040970f, 0.053655f, -0.001482f, -0.002821f, -0.032902f, -0.000066f, 0.005729f, 0.001116f, 0.056517f, -0.017058f, -0.021947f, 0.037761f, -0.039276f,
	-0.012100f, 0.064207f, -0.001096f, -0.013941f, 0.006814f, 0.008710f, -0.012277f, -0.037790f, -0.022203f, 0.014245f, 0.023934f, 0.012607f, 0.028185f, 0.041440f, -0.015444f, -0.022646f, 0.048805f, 0.020521f, -0.080918f, 0.029123f, -0.081415f, -0.044517f, 0.073681f, 0.021481f, -0.045782f, -0.048161f, 0.003254f, 0.036460f, -0.020011f, 0.065280f, 0.002563f, -0.013150f, 0.045393f, -0.015692f,
	-0.013403f, 0.059276f, 0.001032f, -0.014545f, 0.001798f, 0.010646f, -0.008624f, -0.026081f, -0.017773f, 0.015405f, 0.015492f, 0.014040f, 0.022709f, 0.044120f, -0.010399f, -0.025661f, 0.051172f, 0.017503f, -0.087720f, 0.021120f, -0.123991f, -0.047505f, 0.087387f, 0.047337f, -0.088646f, -0.065851f, 0.004667f, 0.069448f, -0.040053f, 0.076718f, 0.023178f, -0.004565f, 0.059432f, 0.003138f,
	-0.013951f, 0.058265f, 0.004661f, -0.015235f, -0.000197f, 0.012932f, -0.005151f, -0.015313f, -0.012719f, 0.014418f, 0.008297f, 0.018443f, 0.016678f, 0.051541f, -0.004867f, -0.028055f, 0.052224f, 0.011609f, -0.091004f, 0.016980f, -0.158439f, -0.046922f, 0.104617f, 0.077207f, -0.137148f, -0.078657f, 0.005486f, 0.103939f, -0.062683f, 0.082257f, 0.041975f, 0.000801f, 0.070429f, 0.027527f,
	-0.012210f, 0.028100f, -0.049457f, -0.000857f, 0.000872f, -0.019030f, 0.038293f, -0.002178f, 0.022197f, 0.008799f, -0.017828f, -0.005589f, -0.010209f, -0.026452f, 0.021247f, -0.052723f, 0.074659f, 0.058170f, -0.117953f, -0.020708f, -0.092993f, -0.079196f, 0.037883f, 0.239302f, -0.027228f, -0.100648f, 0.058909f, 0.082147f, 0.014782f, 0.033906f, 0.058190f, -0.035069f, -0.021313f, -0.027376f,
	-0.009373f, 0.029412f, -0.026531f, -0.009199f, -0.003610f, -0.013154f, 0.015847f, 0.006945f, 0.008617f, 0.011675f, -0.022788f, 0.000421f, -0.007697f, 0.005751f, 0.004594f, -0.044864f, 0.063024f, 0.031416f, -0.086743f, -0.005786f, -0.098907f, -0.064158f, 0.049203f, 0.156108f, -0.042964f, -0.089257f, 0.038446f, 0.080608f, -0.015415f, 0.071399f, 0.069731f, -0.012170f, 0.005798f, -0.005172f,
	-0.007108f, 0.026011f, 0.001392f, -0.008785f, -0.008676f, 0.005534f, -0.002323f, 0.008151f, -0.006538f, 0.012718f, -0.016466f, 0.016828f, 0.006599f, 0.032792f, -0.008449f, -0.031395f, 0.045979f, 0.010267f, -0.064263f, 0.010528f, -0.087206f, -0.035954f, 0.070434f, 0.037452f, -0.075439f, -0.048176f, -0.000307f, 0.074329f, -0.047401f, 0.093968f, 0.057921f, 0.003554f, 0.025206f, 0.029137f,
	-0.008616f, 0.022966f, 0.025314f, -0.006647f, -0.012574f, 0.026313f, -0.017855f, 0.005573f, -0.012147f, 0.015962f, -0.009681f, 0.035391f, 0.015389f, 0.061577f, -0.023327f, -0.005465f, 0.025007f, -0.014906f, -0.045808f, 0.023055f, -0.069940f, -0.012007f, 0.101986f, -0.066696f, -0.085795f, -0.002255f, -0.051891f, 0.079767f, -0.057766f, 0.078189f, 0.009062f, 0.022309f, 0.030125f, 0.051138f,
	-0.007559f, 0.013536f, 0.044396f, -0.007128f, -0.015567f, 0.038755f, -0.032699f, 0.009439f, -0.018290f, 0.012901f, -0.008295f, 0.047013f, 0.018435f, 0.076580f, -0.045586f, 0.016721f, 0.010805f, -0.037831f, -0.013755f, 0.026798f, -0.057710f, -0.005862f, 0.113804f, -0.159457f, -0.085242f, 0.031892f, -0.090113f, 0.066240f, -0.055402f, 0.053706f, -0.034191f, 0.047815f, 0.018971f, 0.071248f,
	-0.009091f, 0.030428f, 0.013028f, 0.035270f, -0.081955f, 0.036276f, 0.100983f, -0.087388f, -0.023476f, 0.093938f, -0.074920f, -0.042748f, 0.009283f, -0.052713f, 0.069944f, 0.007487f, 0.044433f, 0.011768f, -0.036858f, -0.036562f, 0.024165f, -0.141056f, -0.039714f, -0.075826f, 0.052239f, 0.062199f, -0.048408f, -0.033798f, 0.070343f, 0.124688f, -0.003466f, 0.051026f, 0.026850f, -0.026589f,
	-0.006597f, 0.030631f, 0.019664f, 0.021478f, -0.061211f, 0.024677f, 0.092608f, -0.095386f, -0.041650f, 0.068021f, -0.054620f, -0.036136f, 0.003440f, -0.021689f, 0.046307f, 0.007803f, 0.056620f, 0.018329f, -0.048106f, -0.037355f, 0.044779f, -0.170111f, -0.043462f, -0.076020f, 0.064547f, 0.063396f, -0.047873f, -0.054226f, 0.076392f, 0.081326f, 0.000747f, 0.074683f, 0.030657f, -0.067772f,
	-0.006641f, 0.024694f, 0.004169f, 0.027776f, -0.027517f, 0.013511f, 0.064805f, -0.082940f, -0.047464f, 0.039102f, -0.047983f, -0.025260f, -0.012175f, 0.006766f, 0.039254f, 0.004585f, 0.108825f, 0.031769f, -0.009359f, -0.008230f, 0.016421f, -0.164640f, -0.117072f, -0.007971f, 0.069640f, 0.013253f, -0.033817f, -0.074767f, 0.071010f, 0.026436f, 0.003056f, 0.090554f, 0.005886f, -0.126966f,
	0.003124f, 0.009371f, 0.014768f, 0.046412f, -0.023874f, 0.007554f, 0.036147f, -0.057698f, -0.058069f, 0.021256f, -0.033315f, -0.028152f, -0.018259f, 0.027895f, 0.014161f, 0.004788f, 0.111066f, 0.042408f, -0.022688f, -0.017329f, 0.008180f, -0.162840f, -0.121148f, 0.012000f, 0.040787f, 0.005472f, -0.028935f, -0.070284f, 0.051087f, 0.002654f, 0.026039f, 0.077896f, -0.025666f, -0.138535f,
	-0.000470f, 0.012891f, 0.009958f, 0.038234f, -0.036776f, 0.012638f, 0.068663f, -0.077589f, -0.036998f, 0.050930f, -0.057174f, -0.042770f, -0.006013f, -0.005012f, 0.037131f, 0.011314f, 0.092853f, 0.040593f, -0.014258f, -0.022855f, 0.028109f, -0.170083f, -0.092356f, -0.017012f, 0.053071f, 0.021873f, -0.039264f, -0.061002f, 0.057296f, 0.043219f, 0.021993f, 0.064114f, -0.018287f, -0.100373f,
	-0.004849f, 0.015938f, 0.022983f, 0.026902f, -0.073622f, 0.023429f, 0.089584f, -0.088285f, -0.026052f, 0.080286f, -0.059955f, -0.060351f, 0.007903f, -0.035545f, 0.046797f, 0.007563f, 0.038369f, 0.030247f, -0.059021f, -0.056175f, 0.056872f, -0.166273f, -0.011250f, -0.093711f, 0.035468f, 0.071037f, -0.053530f, -0.042127f, 0.065314f, 0.098363f, 0.023179f, 0.056227f, 0.018585f, -0.031417f,
	-0.022520f, -0.008135f, -0.028919f, -0.050592f, 0.028229f, -0.006670f, -0.060855f, -0.025108f, 0.032576f, -0.018823f, 0.066255f, 0.018170f, 0.050211f, 0.001974f, -0.062666f, -0.057057f, -0.027695f, 0.045343f, -0.016243f, 0.061633f, 0.033008f, 0.024487f, 0.074017f, -0.133643f, 0.041960f, -0.008005f, 0.017760f, -0.020807f, 0.009949f, -0.031184f, -0.022929f, 0.014085f, 0.078201f, 0.073117f,
	-0.008675f, -0.004691f, -0.013081f, -0.031226f, 0.031157f, -0.009924f, -0.096969f, -0.029153f, 0.000787f, -0.038194f, 0.087791f, 0.000669f, 0.047391f, 0.025733f, -0.093797f, -0.072336f, -0.039133f, 0.081739f, -0.024145f, 0.067113f, 0.036711f, 0.015968f, 0.050245f, -0.135056f, 0.022818f, 0.008747f, 0.011110f, -0.044613f, 0.004409f, -0.030744f, -0.014206f, -0.016314f, 0.026864f, 0.033661f,
	-0.008350f, -0.011949f, -0.026508f, -0.026911f, 0.063836f, -0.024789f, -0.126394f, -0.011390f, -0.004841f, -0.063477f, 0.084207f, 0.008974f, 0.040823f, 0.048228f, -0.106669f, -0.072520f, 0.012682f, 0.093989f, 0.007098f, 0.087810f, 0.011179f, 0.012357f, -0.005468f, -0.074058f, 0.051617f, -0.038525f, 0.027206f, -0.052944f, -0.001957f, -0.069244f, -0.001150f, -0.012855f, 0.002275f, -0.012184f,
	0.001527f, -0.031469f, -0.019959f, -0.032691f, 0.084353f, -0.036934f, -0.139297f, 0.005872f, -0.012615f, -0.087659f, 0.090429f, 0.021235f, 0.029692f, 0.064764f, -0.125564f, -0.055872f, 0.037072f, 0.084147f, -0.001494f, 0.073344f, 0.027889f, -0.000113f, -0.020299f, -0.040534f, 0.015971f, -0.035466f, 0.033553f, -0.071962f, -0.021193f, -0.078379f, 0.024814f, -0.018801f, -0.021044f, -0.038763f,
	-0.009394f, -0.028927f, -0.028906f, -0.024460f, 0.073718f, -0.026898f, -0.120720f, -0.003723f, -0.012295f, -0.070463f, 0.075708f, 0.021766f, 0.032103f, 0.053181f, -0.101806f, -0.052394f, 0.030694f, 0.112096f, 0.015064f, 0.098439f, -0.005609f, 0.016172f, -0.039627f, -0.035390f, 0.062895f, -0.064759f, 0.040731f, -0.023003f, -0.019984f, -0.078158f, 0.013167f, -0.008582f, -0.012839f, -0.026034f,
	-0.014806f, -0.020586f, -0.019304f, -0.037248f, 0.040627f, -0.009079f, -0.093808f, -0.017684f, 0.001926f, -0.042956f, 0.076953f, 0.012620f, 0.038220f, 0.029003f, -0.084598f, -0.051706f, -0.017717f, 0.096814f, -0.013796f, 0.075862f, 0.017984f, 0.023149f, 0.017010f, -0.093650f, 0.035446f, -0.023135f, 0.026297f, -0.011769f, -0.011753f, -0.043351f, 0.000060f, -0.001953f, 0.028135f, 0.023804f,
	0.029937f, -0.018527f, -0.150727f, 0.081029f, 0.034186f, -0.056299f, 0.148788f, 0.006526f, 0.091516f, -0.080441f, -0.035735f, 0.001997f, 0.019030f, -0.077643f, 0.107984f, -0.056258f, 0.031181f, -0.051535f, -0.027580f, 0.051815f, 0.012036f, 0.081437f, 0.046704f, -0.059784f, 0.100904f, 0.025934f, 0.021662f, -0.016937f, 0.039461f, -0.046583f, -0.092257f, -0.006300f, 0.025170f, 0.075511f,
	0.027077f, -0.012351f, -0.112038f, 0.035893f, 0.028873f, -0.001260f, 0.084827f, -0.000242f, 0.048683f, -0.054899f, -0.029997f, 0.032628f, -0.039785f, -0.108273f, 0.045755f, -0.052769f, 0.008202f, -0.062941f, -0.003272f, 0.105699f, 0.039987f, 0.020061f, 0.023151f, 0.020974f, 0.008953f, 0.010896f, 0.031997f, -0.023033f, 0.010634f, -0.071553f, -0.062459f, -0.034568f, 0.012175f, 0.063440f,
	0.008543f, 0.000575f, -0.036234f, 0.011338f, 0.007897f, -0.004413f, 0.042000f, 0.015857f, 0.024113f, -0.029744f, -0.022255f, 0.053502f, -0.038865f, -0.097944f, 0.017588f, -0.046984f, 0.033087f, -0.053276f, 0.001529f, 0.130264f, 0.069392f, -0.067173f, 0.042421f, 0.083647f, -0.052001f, 0.027113f, 0.009719f, 0.006872f, -0.038341f, -0.067952f, 0.010640f, -0.078205f, -0.015510f, 0.044074f,
	-0.004854f, -0.002651f, -0.001199f, -0.004656f, -0.017881f, 0.006502f, 0.011106f, 0.033451f, 0.012608f, -0.007254f, -0.021085f, 0.015936f, -0.015926f, -0.005386f, 0.006492f, -0.032176f, -0.004622f, -0.056644f, 0.008831f, 0.017207f, 0.029211f, -0.031234f, -0.017190f, 0.017370f, -0.014199f, -0.016837f, 0.012242f, 0.028844f, 0.024051f, -0.033052f, 0.005809f, -0.026851f, -0.003806f, 0.029867f,
	-0.015813f, -0.010424f, 0.049608f, -0.025236f, -0.047180f, 0.033566f, -0.017722f, 0.037312f, 0.003478f, 0.019989f, -0.017899f, -0.019776f, 0.013111f, 0.105673f, -0.000689f, -0.029181f, -0.055355f, -0.059296f, 0.016272f, -0.126448f, -0.003426f, 0.027239f, -0.080562f, -0.048943f, 0.063203f, -0.071188f, 0.018085f, 0.055066f, 0.103002f, 0.015990f, -0.024552f, 0.027166f, 0.005359f, -0.008937f,
	-0.030164f, -0.027591f, 0.112130f, -0.046006f, -0.063466f, 0.021257f, -0.061882f, 0.075039f, -0.009550f, 0.046188f, -0.025234f, -0.036147f, 0.006893f, 0.099786f, -0.046972f, -0.003808f, -0.042536f, -0.034124f, 0.072153f, -0.146706f, -0.007001f, 0.011713f, -0.032354f, -0.013285f, 0.064616f, -0.076540f, -0.019793f, 0.045941f, 0.057997f, -0.041981f, -0.013777f, -0.007784f, -0.005500f, 0.063654f,
	-0.019028f, -0.051789f, 0.153268f, -0.072220f, -0.068001f, 0.053218f, -0.114782f, 0.100188f, -0.032458f, 0.065327f, -0.041993f, 0.000529f, -0.049657f, 0.064999f, -0.113438f, 0.028145f, -0.026783f, -0.004495f, 0.083060f, -0.067097f, 0.025177f, -0.054527f, 0.012232f, 0.061208f, 0.035559f, -0.041029f, -0.084866f, 0.011647f, -0.034824f, -0.100697f, -0.069165f, -0.000768f, 0.005575f, 0.110722f,
	-0.028944f, -0.046124f, 0.115567f, -0.042613f, -0.067724f, 0.014225f, -0.060491f, 0.103470f, 0.006232f, 0.039413f, -0.031752f, -0.037167f, -0.006997f, 0.085995f, -0.038657f, 0.010688f, -0.040086f, -0.042208f, 0.098912f, -0.130371f, 0.037304f, 0.026656f, -0.077987f, -0.030978f, 0.062407f, -0.072535f, -0.073939f, 0.000909f, 0.019295f, -0.034458f, 0.004467f, -0.047183f, 0.050673f, 0.035176f,
	-0.010823f, -0.035975f, 0.055356f, -0.020108f, -0.053716f, 0.014079f, -0.008891f, 0.083913f, 0.022598f, 0.005824f, -0.031201f, -0.038542f, -0.005753f, 0.089595f, 0.015986f, -0.004255f, -0.071317f, -0.065118f, 0.079317f, -0.106829f, 0.072446f, 0.039057f, -0.148855f, -0.072824f, 0.059724f, -0.064924f, -0.048338f, 0.013216f, 0.059644f, 0.037032f, 0.035514f, -0.058015f, 0.052789f, -0.068904f,
	0.002749f, -0.025782f, 0.001067f, -0.000955f, -0.021760f, -0.004910f, 0.022410f, 0.073031f, 0.031948f, -0.017623f, -0.036578f, 0.002064f, -0.036635f, -0.028107f, 0.022568f, -0.013938f, -0.026049f, -0.064352f, 0.076825f, 0.032919f, 0.104873f, -0.018636f, -0.086478f, -0.011360f, -0.025080f, -0.005483f, -0.057313f, -0.019218f, -0.018251f, -0.006270f, 0.058547f, -0.109717f, 0.043965f, -0.042968f,
	0.019557f, -0.022238f, -0.040271f, 0.015531f, -0.000923f, -0.011734f, 0.050924f, 0.059961f, 0.044488f, -0.037512f, -0.047698f, 0.041131f, -0.067325f, -0.125904f, 0.038185f, -0.026749f, 0.003161f, -0.063752f, 0.059945f, 0.149873f, 0.138916f, -0.043073f, -0.038810f, 0.040424f, -0.060299f, 0.036249f, -0.057345f, -0.030897f, -0.069820f, -0.039359f, 0.051438f, -0.140784f, 0.040745f, -0.023033f,
	0.038295f, -0.025011f, -0.119022f, 0.039087f, 0.023303f, -0.007108f, 0.097748f, 0.031451f, 0.066314f, -0.064618f, -0.049757f, 0.022319f, -0.054682f, -0.131953f, 0.060803f, -0.041005f, -0.002889f, -0.065952f, 0.048990f, 0.118731f, 0.087371f, 0.038178f, -0.008116f, -0.019859f, 0.013619f, 0.027323f, -0.017437f, -0.041034f, -0.017123f, -0.056194f, -0.033365f, -0.067470f, 0.076076f, 0.024548f,
	0.027485f, -0.031004f, -0.155083f, 0.076967f, 0.030238f, -0.066616f, 0.146021f, 0.018614f, 0.095435f, -0.090351f, -0.026858f, -0.001195f, 0.004065f, -0.062969f, 0.102157f, -0.046214f, 0.025250f, -0.047454f, 0.004391f, 0.045916f, 0.011457f, 0.054752f, 0.064190f, -0.063966f, 0.092363f, 0.019011f, 0.007010f, -0.017645f, 0.023346f, -0.068486f, -0.085984f, -0.024607f, 0.046082f, 0.096832f,
	0.011663f, 0.006518f, -0.034439f, 0.013241f, 0.007617f, -0.009766f, 0.044050f, 0.033840f, 0.029582f, -0.028393f, -0.028713f, 0.055641f, -0.043922f, -0.099413f, 0.025141f, -0.040381f, 0.025727f, -0.058214f, 0.010448f, 0.139032f, 0.097498f, -0.059681f, 0.018053f, 0.084934f, -0.052343f, 0.037634f, -0.003643f, 0.010254f, -0.050500f, -0.038878f, 0.012009f, -0.092562f, -0.007898f, 0.022313f,
	-0.002313f, 0.000470f, 0.000002f, -0.004007f, -0.016215f, 0.003976f, 0.010717f, 0.048028f, 0.016739f, -0.006186f, -0.024483f, 0.020048f, -0.016876f, -0.003548f, 0.010717f, -0.026953f, -0.010998f, -0.055979f, 0.019518f, 0.025395f, 0.050851f, -0.031442f, -0.027433f, 0.021960f, -0.018106f, -0.009491f, 0.000531f, 0.037647f, 0.007463f, -0.008452f, 0.013288f, -0.048925f, 0.006064f, 0.024257f,
	-0.012568f, -0.006592f, 0.049539f, -0.024277f, -0.046609f, 0.030396f, -0.019942f, 0.053337f, 0.007757f, 0.021468f, -0.022706f, -0.013044f, 0.011272f, 0.109312f, 0.003377f, -0.022628f, -0.060616f, -0.061807f, 0.030161f, -0.121278f, 0.019402f, 0.026839f, -0.095660f, -0.042434f, 0.064863f, -0.064156f, 0.007525f, 0.057258f, 0.096057f, 0.035786f, -0.019042f, 0.010115f, 0.006232f, -0.015055f,
	-0.023212f, -0.060246f, 0.157807f, -0.069886f, -0.065658f, 0.063342f, -0.104423f, 0.082001f, -0.030749f, 0.079114f, -0.044460f, 0.004171f, -0.030429f, 0.042545f, -0.096287f, 0.021890f, -0.044874f, -0.001170f, 0.067071f, -0.085689f, 0.021431f, -0.035122f, 0.002907f, 0.064224f, 0.017922f, -0.037758f, -0.083689f, 0.004437f, -0.037603f, -0.087459f, -0.078257f, -0.011921f, 0.002713f, 0.130484f,
	-0.010961f, -0.010595f, 0.057062f, -0.023094f, -0.047200f, 0.021346f, -0.011516f, 0.068656f, 0.015527f, 0.014810f, -0.022984f, -0.021018f, 0.006940f, 0.106574f, 0.011226f, -0.023889f, -0.062806f, -0.069001f, 0.044159f, -0.108003f, 0.050370f, 0.047099f, -0.112640f, -0.068669f, 0.081751f, -0.068521f, -0.039172f, 0.022972f, 0.052837f, 0.036443f, 0.008144f, -0.028320f, 0.041313f, -0.064570f,
	0.001631f, -0.003250f, 0.002325f, -0.002118f, -0.016181f, 0.000274f, 0.016759f, 0.060910f, 0.024499f, -0.012519f, -0.030588f, 0.015271f, -0.023100f, -0.011757f, 0.016440f, -0.028638f, -0.012990f, -0.064844f, 0.039739f, 0.031429f, 0.079984f, -0.015321f, -0.052897f, -0.006078f, -0.010170f, -0.011420f, -0.050449f, -0.009900f, -0.025391f, -0.012909f, 0.032748f, -0.085004f, 0.038699f, -0.043162f,
	0.017805f, 0.004146f, -0.038887f, 0.014222f, 0.006581f, -0.009683f, 0.047461f, 0.046887f, 0.038038f, -0.032345f, -0.032763f, 0.056280f, -0.049485f, -0.108966f, 0.031645f, -0.041431f, 0.020138f, -0.064023f, 0.031810f, 0.142533f, 0.126216f, -0.050995f, -0.002245f, 0.056266f, -0.050403f, 0.037812f, -0.053115f, -0.030572f, -0.081976f, -0.050982f, 0.028974f, -0.127634f, 0.029303f, -0.029574f,
	0.012632f, -0.105919f, 0.042832f, -0.056614f, 0.095894f, -0.023994f, -0.019214f, -0.026746f, -0.070577f, 0.202269f, 0.218185f, -0.141116f, 0.012637f, -0.191347f, 0.155533f, -0.244488f, 0.121779f, -0.013130f, 0.138472f, -0.059114f, -0.216544f, -0.050477f, 0.066853f, -0.149560f, -0.157390f, -0.095098f, -0.011175f, -0.068427f, 0.210754f, -0.054577f, 0.001436f, 0.040342f, -0.004236f, -0.006205f,
	-0.009740f, -0.029067f, 0.036475f, -0.046866f, 0.118228f, 0.012225f, -0.006405f, -0.060398f, -0.086556f, 0.108100f, 0.186918f, -0.112111f, 0.050136f, -0.100126f, 0.105268f, -0.169540f, 0.136663f, -0.073114f, 0.067763f, -0.014521f, -0.082623f, -0.012863f, 0.033765f, -0.100967f, -0.086562f, -0.092416f, -0.077945f, 0.022729f, 0.114331f, -0.008651f, -0.069342f, 0.005683f, 0.051571f, -0.009558f,
	-0.031301f, 0.046217f, 0.033243f, -0.035388f, 0.123785f, 0.052248f, 0.021922f, -0.090547f, -0.125667f, 0.007581f, 0.182378f, -0.055823f, 0.074368f, -0.029074f, 0.053632f, -0.049594f, 0.107463f, -0.137761f, 0.005821f, -0.001673f, 0.066449f, 0.006118f, 0.023528f, 0.013804f, -0.007269f, -0.081388f, -0.113434f, 0.070675f, 0.027780f, 0.045024f, -0.106739f, -0.011678f, 0.031635f, 0.044212f,
	-0.047441f, 0.105188f, 0.031918f, -0.024384f, 0.114098f, 0.082601f, 0.048491f, -0.112125f, -0.170704f, -0.059301f, 0.164752f, -0.009947f, 0.090739f, 0.006616f, 0.010369f, 0.042357f, 0.050623f, -0.158918f, -0.042210f, 0.014508f, 0.136027f, -0.007670f, -0.034495f, 0.072312f, 0.050835f, -0.067209f, -0.075955f, 0.023597f, 0.006577f, 0.084867f, -0.082590f, 0.024191f, -0.041988f, 0.068711f,
	-0.060936f, 0.133902f, 0.031530f, -0.004574f, 0.064304f, 0.088650f, 0.058070f, -0.124018f, -0.171917f, -0.102988f, 0.148276f, 0.058157f, 0.076201f, 0.044152f, 0.002505f, 0.090897f, -0.015203f, -0.110439f, -0.090091f, 0.069662f, 0.172459f, -0.039446f, -0.067579f, 0.050794f, 0.093654f, -0.082964f, -0.026363f, 0.019254f, -0.002660f, 0.016061f, 0.024545f, 0.043909f, -0.092051f, 0.131171f,
	-0.074646f, 0.131695f, 0.040257f, 0.018490f, -0.004794f, 0.081236f, 0.061589f, -0.133348f, -0.147784f, -0.119212f, 0.094712f, 0.084045f, 0.033173f, 0.036408f, 0.031797f, 0.094617f, -0.048706f, 0.003825f, -0.075566f, 0.078798f, 0.127307f, -0.065285f, -0.109546f, -0.039558f, 0.030185f, -0.072564f, 0.052974f, -0.008825f, -0.088317f, -0.022192f, 0.091494f, 0.087785f, -0.062428f, 0.116086f,
	-0.090236f, 0.103626f, 0.066939f, 0.057319f, -0.079163f, 0.060686f, 0.053354f, -0.131920f, -0.087102f, -0.115977f, 0.028577f, 0.074951f, -0.040556f, 0.035491f, 0.087538f, 0.018752f, -0.081645f, 0.116761f, 0.007481f, 0.045592f, 0.001466f, -0.094081f, -0.126988f, -0.146376f, -0.033849f, -0.021719f, 0.127080f, -0.004981f, -0.202755f, -0.119973f, 0.081963f, 0.106640f, -0.105281f, -0.008628f,
	-0.101059f, 0.055177f, 0.092659f, 0.069983f, -0.150193f, 0.026469f, 0.028574f, -0.115258f, -0.008902f, -0.088879f, -0.036594f, 0.022392f, -0.109572f, -0.005240f, 0.149355f, -0.115056f, -0.119773f, 0.122550f, 0.083092f, 0.011822f, -0.092288f, -0.074034f, -0.034558f, -0.115984f, -0.044921f, 0.007854f, 0.164244f, 0.014803f, -0.170980f, -0.127570f, 0.019750f, 0.095694f, 0.000371f, -0.041291f,
	-0.101563f, 0.024376f, 0.106668f, 0.071318f, -0.187231f, 0.012534f, 0.023991f, -0.099795f, 0.030129f, -0.076617f, -0.069392f, -0.016558f, -0.116462f, -0.024845f, 0.158655f, -0.199665f, -0.116228f, 0.076206f, 0.060656f, -0.024832f, -0.096681f, -0.049299f, 0.082420f, -0.042295f, -0.032862f, 0.018749f, 0.125343f, 0.039212f, -0.037558f, -0.047906f, -0.025870f, -0.049529f, 0.088169f, -0.088273f,
	-0.101840f, -0.013119f, 0.089419f, 0.075166f, -0.182579f, 0.048658f, 0.037188f, -0.067749f, 0.031914f, -0.101814f, -0.073274f, -0.026481f, -0.109668f, -0.000858f, 0.110793f, -0.202483f, -0.060253f, 0.007145f, 0.019590f, -0.069464f, -0.056870f, 0.023689f, 0.132006f, 0.031411f, 0.013119f, -0.007012f, 0.038285f, 0.031656f, 0.001551f, -0.025447f, -0.065416f, -0.114616f, 0.017261f, -0.086359f,
	-0.084252f, -0.076412f, 0.065909f, 0.060881f, -0.142931f, 0.092286f, 0.073191f, -0.013071f, 0.017189f, -0.159961f, -0.092115f, -0.031651f, -0.101432f, -0.005721f, 0.027741f, -0.106024f, 0.050453f, -0.034217f, -0.067543f, -0.069923f, -0.011090f, 0.116035f, 0.100208f, 0.041462f, -0.024840f, -0.044467f, -0.108854f, -0.009354f, 0.073244f, 0.020455f, -0.063103f, -0.129646f, -0.010099f, -0.129133f,
	-0.053651f, -0.123308f, 0.046845f, 0.020630f, -0.076671f, 0.113112f, 0.110897f, 0.086910f, 0.003931f, -0.182808f, -0.094838f, -0.023499f, -0.059496f, -0.018019f, -0.032692f, -0.004557f, 0.053504f, -0.066417f, -0.110231f, -0.014603f, -0.024896f, 0.113252f, 0.016412f, 0.021225f, -0.025860f, -0.075046f, -0.145044f, -0.030890f, 0.110020f, 0.003382f, 0.007818f, -0.098244f, -0.037896f, -0.009802f,
	-0.023018f, -0.146263f, 0.038114f, -0.004028f, -0.020148f, 0.111274f, 0.136014f, 0.170400f, 0.002465f, -0.171044f, -0.075670f, -0.007542f, -0.006424f, -0.025856f, -0.031416f, 0.083827f, 0.010568f, -0.069980f, -0.109310f, 0.034905f, -0.065427f, 0.031177f, -0.044852f, 0.019905f, -0.066999f, -0.093510f, -0.115084f, -0.095158f, 0.120015f, 0.040204f, 0.030019f, -0.030543f, -0.096811f, 0.096700f,
	0.002563f, -0.127886f, 0.038658f, -0.012071f, 0.033255f, 0.099861f, 0.164565f, 0.238246f, 0.001567f, -0.105923f, -0.057783f, 0.008664f, 0.027296f, -0.030573f, -0.009853f, 0.117020f, -0.032701f, -0.000283f, -0.057331f, 0.051644f, -0.084379f, -0.039476f, -0.031627f, -0.008417f, -0.048362f, -0.080557f, -0.044505f, -0.140295f, 0.129312f, 0.090377f, 0.020906f, 0.080368f, -0.088585f, 0.136852f,
	0.022743f, -0.067070f, 0.035835f, -0.011617f, 0.073365f, 0.063325f, 0.146213f, 0.262278f, -0.002566f, -0.007656f, -0.026090f, 0.035984f, 0.031533f, -0.009645f, 0.044980f, 0.084848f, -0.046015f, 0.086576f, -0.001782f, 0.061428f, 0.003570f, -0.047340f, 0.031674f, 0.003656f, -0.006269f, -0.074342f, -0.011328f, -0.102136f, 0.042874f, 0.026755f, -0.027391f, 0.130301f, -0.059867f, 0.018942f,
	0.044270f, 0.008816f, 0.045389f, -0.021660f, 0.105411f, 0.011416f, 0.109320f, 0.275577f, -0.009832f, 0.108035f, 0.004491f, 0.064390f, 0.012428f, 0.006669f, 0.095357f, -0.012238f, -0.068972f, 0.152817f, 0.075822f, 0.056884f, 0.138813f, -0.051472f, 0.080042f, 0.012909f, 0.015075f, -0.053459f, 0.028833f, 0.077070f, 0.026517f, -0.070675f, -0.045298f, 0.143809f, -0.084532f, -0.083487f,
	0.062375f, 0.088371f, 0.056930f, -0.031399f, 0.124205f, -0.042608f, 0.070908f, 0.302850f, -0.030713f, 0.221806f, 0.047883f, 0.094536f, -0.004204f, 0.009990f, 0.148794f, -0.108520f, -0.096997f, 0.187564f, 0.140322f, 0.044017f, 0.262141f, -0.062547f, 0.161527f, -0.013297f, 0.037476f, -0.028287f, 0.047541f, 0.256555f, -0.040101f, -0.087736f, 0.006879f, 0.108453f, -0.022617f, -0.092782f,
	0.101351f, -0.059896f, 0.089671f, -0.007831f, -0.037385f, 0.008829f, -0.001672f, -0.180136f, 0.189267f, 0.006458f, -0.232031f, -0.060867f, 0.181227f, 0.130852f, -0.046776f, 0.035489f, 0.001493f, 0.160017f, 0.051721f, 0.209411f, 0.059181f, -0.083851f, 0.207104f, -0.102355f, 0.039265f, -0.194572f, -0.024321f, -0.005820f, -0.022768f, 0.136793f, -0.107813f, -0.023127f, -0.048810f, 0.065417f,
	0.081528f, -0.068502f, 0.070887f, -0.055525f, -0.045082f, 0.007139f, -0.005518f, -0.118178f, 0.156592f, -0.033074f, -0.063860f, 0.040561f, 0.111628f, 0.029568f, 0.001045f, 0.060952f, 0.022298f, 0.185051f, 0.009521f, -0.033300f, 0.094005f, 0.013600f, 0.105380f, 0.040334f, -0.061870f, -0.114470f, 0.021331f, 0.005113f, 0.002683f, 0.024141f, -0.026811f, -0.015689f, 0.020153f, 0.092373f,
	0.068413f, -0.083706f, 0.052305f, -0.086296f, -0.055880f, 0.021816f, 0.004492f, -0.068120f, 0.145758f, -0.102567f, 0.092434f, 0.075123f, 0.007851f, 0.008520f, 0.005845f, 0.082068f, 0.031453f, 0.180413f, -0.035339f, -0.133303f, 0.088724f, 0.067980f, 0.008976f, 0.111553f, -0.060575f, -0.053669f, 0.037053f, -0.004075f, 0.049025f, 0.024206f, 0.031083f, 0.032459f, 0.049141f, 0.038812f,
	0.072230f, -0.065201f, 0.036058f, -0.094849f, -0.081347f, 0.028568f, 0.008797f, -0.040623f, 0.140707f, -0.126779f, 0.170257f, 0.059293f, -0.052776f, 0.003182f, -0.000677f, 0.081645f, 0.026914f, 0.131691f, -0.055588f, -0.098342f, 0.031136f, -0.006790f, 0.015095f, 0.065597f, 0.078600f, 0.017709f, 0.045791f, -0.034864f, 0.076622f, 0.013773f, 0.067413f, -0.028287f, 0.059081f, 0.012658f,
	0.085169f, -0.029802f, 0.042368f, -0.082336f, -0.097939f, 0.016608f, 0.019748f, -0.012989f, 0.121625f, -0.087612f, 0.209630f, 0.002191f, -0.126582f, 0.050998f, -0.030648f, 0.060010f, 0.000332f, 0.046455f, -0.023080f, 0.055862f, -0.053376f, -0.135321f, 0.065824f, 0.029844f, 0.265716f, 0.072053f, 0.059330f, -0.027794f, 0.089039f, -0.055593f, 0.088900f, -0.113375f, 0.061857f, -0.009200f,
	0.083666f, 0.022002f, 0.040552f, -0.085899f, -0.099865f, 0.015644f, 0.005068f, 0.015547f, 0.156486f, -0.077980f, 0.202180f, 0.014951f, -0.087338f, 0.065851f, -0.063459f, -0.028938f, 0.043400f, -0.024140f, -0.005938f, 0.066480f, -0.072232f, -0.179693f, -0.014319f, -0.032909f, 0.209669f, 0.122452f, -0.039648f, 0.049486f, 0.011409f, -0.011759f, -0.007885f, -0.033417f, -0.079718f, 0.113528f,
	0.083042f, 0.057031f, 0.040177f, -0.099114f, -0.076680f, 0.009479f, -0.003028f, -0.000359f, 0.165022f, -0.119377f, 0.166816f, 0.098159f, -0.004888f, 0.020345f, -0.028135f, -0.047425f, 0.054928f, -0.014242f, -0.021031f, -0.044814f, 0.032783f, -0.054961f, -0.131702f, -0.039012f, -0.016037f, 0.136114f, -0.052413f, 0.121523f, -0.038968f, 0.020495f, -0.008329f, -0.024960f, -0.081805f, 0.022575f,
	0.083252f, 0.078107f, 0.056261f, -0.095219f, -0.059524f, 0.003298f, -0.006615f, -0.018114f, 0.165684f, -0.099090f, 0.091701f, 0.078091f, 0.033441f, -0.005544f, -0.024775f, -0.060616f, 0.054683f, -0.025820f, 0.034770f, -0.091304f, 0.061625f, 0.040350f, -0.178139f, 0.001904f, -0.150915f, 0.076588f, -0.034127f, 0.096746f, -0.053605f, 0.008977f, -0.035470f, 0.025028f, -0.047913f, -0.054413f,
	0.104239f, 0.086773f, 0.093349f, -0.055643f, -0.033261f, -0.013246f, -0.005449f, -0.083837f, 0.158899f, -0.044047f, -0.029467f, -0.026012f, 0.082055f, -0.049138f, 0.021797f, 0.008367f, 0.031893f, -0.087107f, 0.189897f, -0.063379f, 0.017963f, 0.128801f, -0.143253f, 0.036421f, -0.143812f, -0.013284f, 0.024955f, 0.056737f, -0.069906f, 0.014591f, -0.040838f, 0.026539f, -0.056752f, -0.047314f,
	0.135218f, 0.100220f, 0.124814f, 0.000991f, -0.008239f, -0.012542f, -0.007248f, -0.156811f, 0.151583f, -0.017420f, -0.147099f, -0.155713f, 0.101870f, -0.021523f, 0.028922f, 0.110680f, 0.026595f, -0.179864f, 0.346267f, 0.114265f, -0.070904f, 0.161901f, -0.031710f, 0.014850f, -0.024451f, -0.120325f, 0.049384f, -0.013378f, -0.123593f, 0.072623f, -0.129874f, 0.065687f, -0.065814f, -0.083173f,
	0.059343f, -0.012441f, -0.000702f, -0.081890f, -0.008092f, -0.077276f, -0.028878f, 0.037295f, -0.029467f, -0.011411f, -0.007775f, 0.009769f, -0.027726f, 0.005769f, 0.053610f, 0.007873f, -0.041172f, -0.106420f, -0.027219f, 0.033050f, -0.102197f, -0.048661f, -0.066981f, -0.013190f, 0.109772f, 0.030705f, 0.044138f, 0.003928f, 0.036674f, 0.004169f, 0.127857f, 0.033634f, 0.266703f, 0.060249f,
	0.041616f, -0.014486f, -0.010645f, -0.063688f, 0.002398f, 0.007759f, -0.030515f, 0.045130f, -0.060320f, -0.012907f, -0.003144f, -0.002022f, 0.026184f, 0.062737f, 0.093489f, -0.012212f, -0.012731f, -0.061123f, 0.017645f, 0.059738f, -0.070951f, 0.028276f, -0.008200f, -0.013282f, 0.059036f, 0.130001f, 0.007378f, -0.026986f, 0.024631f, 0.046745f, 0.129132f, 0.029581f, 0.168902f, 0.047167f,
	0.022209f, -0.018785f, -0.021705f, -0.047282f, 0.007684f, 0.096519f, -0.037379f, 0.046370f, -0.086593f, -0.016226f, 0.004486f, -0.016435f, 0.077777f, 0.123311f, 0.134030f, -0.031013f, 0.005692f, -0.004530f, 0.059412f, 0.082817f, -0.053324f, 0.097630f, 0.047516f, -0.011465f, 0.006049f, 0.229178f, -0.021088f, -0.047042f, 0.006557f, 0.091702f, 0.122335f, 0.003955f, 0.066979f, 0.045888f,
	0.003588f, -0.021043f, -0.030263f, -0.030409f, 0.008371f, 0.181691f, -0.044518f, 0.046051f, -0.107937f, -0.022794f, 0.009934f, -0.032445f, 0.119848f, 0.179589f, 0.164240f, -0.043652f, 0.020389f, 0.047092f, 0.094236f, 0.116267f, -0.035936f, 0.155206f, 0.107422f, -0.005142f, -0.059549f, 0.322080f, -0.057313f, -0.069079f, -0.015886f, 0.152295f, 0.127300f, -0.018228f, -0.013766f, 0.025152f,
	0.010241f, -0.012175f, -0.071132f, -0.010497f, 0.020024f, 0.062831f, -0.040007f, 0.039616f, -0.072378f, 0.035685f, -0.031690f, 0.021640f, 0.001871f, 0.085038f, 0.053829f, -0.017137f, 0.002122f, 0.049195f, 0.087728f, -0.000013f, -0.026558f, 0.022211f, -0.058457f, 0.166112f, 0.018559f, -0.012076f, -0.001099f, 0.016641f, -0.019024f, 0.008824f, 0.091310f, -0.040634f, 0.020518f, 0.051538f,
	0.005987f, -0.016904f, -0.065972f, -0.010944f, 0.009374f, 0.084910f, -0.052019f, 0.031735f, -0.073636f, 0.036433f, -0.016286f, 0.003295f, 0.010276f, 0.085334f, 0.068926f, -0.031102f, -0.004326f, 0.037220f, 0.078248f, 0.028015f, -0.030765f, 0.043535f, -0.024633f, 0.098897f, 0.024402f, 0.055196f, -0.037672f, -0.019356f, 0.027747f, -0.077052f, 0.014090f, -0.032531f, 0.010393f, 0.037211f,
	0.000485f, -0.009792f, -0.056592f, -0.011803f, 0.001583f, 0.104774f, -0.061755f, 0.023501f, -0.079032f, 0.039804f, -0.011369f, -0.011280f, 0.024653f, 0.096826f, 0.073638f, -0.046150f, -0.008896f, 0.030450f, 0.076726f, 0.038805f, -0.033667f, 0.064954f, 0.000900f, 0.056790f, 0.020232f, 0.116360f, -0.065525f, -0.045163f, 0.037248f, -0.094933f, -0.027418f, -0.028737f, -0.007585f, -0.011135f,
	0.006045f, -0.001260f, -0.070490f, -0.009554f, 0.009933f, 0.083302f, -0.054060f, 0.013771f, -0.080073f, 0.047390f, -0.001836f, -0.009542f, 0.020186f, 0.082461f, 0.052009f, -0.037023f, 0.003870f, 0.028911f, 0.066158f, 0.019377f, -0.061487f, 0.042407f, -0.017089f, 0.104383f, 0.041935f, 0.073886f, -0.019325f, -0.089932f, 0.029586f, -0.070428f, 0.024956f, -0.057337f, 0.001123f, -0.019238f,
	0.011242f, -0.005679f, -0.074412f, -0.010055f, 0.015755f, 0.060586f, -0.047635f, 0.003394f, -0.091558f, 0.044380f, -0.005161f, -0.022962f, 0.015788f, 0.070458f, 0.028218f, -0.036979f, 0.017605f, 0.028455f, 0.076360f, -0.013275f, -0.085415f, 0.018537f, -0.048259f, 0.163691f, 0.057659f, 0.026190f, 0.028125f, -0.133961f, 0.018631f, -0.042571f, 0.090055f, -0.092227f, 0.027934f, -0.057308f,
	0.036225f, -0.071534f, 0.000459f, -0.046818f, 0.009337f, -0.083866f, -0.046178f, -0.015273f, -0.060642f, -0.002822f, -0.089257f, 0.012351f, -0.039814f, -0.035023f, -0.019465f, 0.040371f, -0.061960f, 0.039386f, -0.094567f, -0.024135f, 0.027052f, 0.059938f, 0.091591f, 0.001979f, -0.040503f, -0.107158f, 0.083539f, -0.101314f, 0.013352f, -0.110938f, 0.043372f, 0.129228f, 0.064399f, -0.008668f,
	0.044367f, -0.059525f, 0.015036f, -0.064121f, -0.018004f, -0.082253f, -0.045795f, -0.026919f, -0.070584f, -0.018065f, -0.070391f, -0.010245f, -0.029751f, -0.046835f, -0.028796f, 0.042482f, -0.143375f, 0.002483f, -0.181009f, -0.070951f, 0.071994f, -0.003359f, 0.199769f, -0.097579f, -0.087064f, 0.021258f, 0.050995f, -0.107355f, -0.017802f, 0.053633f, 0.017380f, 0.028065f, 0.073668f, -0.008871f,
	0.043601f, -0.049111f, 0.016832f, -0.062722f, -0.017690f, -0.081388f, -0.042392f, -0.021628f, -0.089830f, -0.013515f, -0.066851f, -0.008770f, -0.034597f, -0.040346f, -0.030496f, 0.037791f, -0.131468f, -0.012470f, -0.162906f, -0.049426f, 0.049875f, -0.008340f, 0.154951f, -0.079562f, -0.052199f, 0.026980f, 0.057094f, -0.092234f, -0.013567f, 0.075758f, 0.017100f, -0.027829f, 0.047598f, -0.032337f,
	0.048275f, -0.038263f, 0.001498f, -0.051199f, 0.023312f, -0.088975f, -0.041336f, 0.005000f, -0.095004f, -0.003208f, -0.060932f, 0.022466f, -0.042236f, 0.005051f, -0.023424f, 0.039786f, -0.019435f, -0.003108f, -0.056234f, 0.026974f, -0.047324f, 0.009209f, -0.052575f, 0.062674f, 0.041095f, -0.089544f, 0.071103f, -0.050484f, 0.024541f, 0.021517f, -0.001177f, -0.034659f, 0.017784f, -0.145986f,
	0.041785f, -0.047523f, -0.029972f, -0.046078f, 0.035909f, -0.097136f, -0.056514f, 0.005071f, -0.089750f, -0.024247f, -0.085315f, 0.019769f, -0.065103f, -0.012747f, -0.033756f, 0.024734f, -0.014857f, 0.011973f, -0.055355f, 0.034763f, -0.048361f, 0.024915f, -0.036487f, 0.063963f, 0.019368f, -0.114169f, 0.095381f, -0.092460f, 0.033839f, -0.059458f, -0.018405f, 0.004700f, 0.059549f, -0.091842f,
	0.044692f, -0.060996f, -0.030403f, -0.035242f, 0.035271f, -0.092818f, -0.058749f, -0.002830f, -0.079239f, -0.025316f, -0.092148f, 0.019888f, -0.062782f, -0.020325f, -0.029536f, 0.030127f, -0.024623f, 0.028330f, -0.061266f, 0.010928f, -0.030107f, 0.035277f, -0.006948f, 0.059755f, -0.013675f, -0.115893f, 0.086825f, -0.110997f, 0.020747f, -0.090179f, -0.023240f, 0.046759f, 0.032906f, -0.074567f,
	0.053635f, 0.024179f, 0.003976f, -0.054942f, 0.021919f, -0.085630f, -0.040517f, 0.019222f, -0.098845f, -0.002500f, -0.058854f, 0.005767f, -0.030366f, 0.004222f, -0.039686f, -0.024247f, -0.003591f, -0.045881f, -0.051159f, 0.028487f, -0.059601f, 0.002317f, -0.116937f, 0.048023f, 0.058109f, -0.042187f, -0.022689f, 0.101089f, -0.085146f, -0.047060f, 0.001347f, -0.071920f, -0.053922f, -0.029344f,
	0.050654f, 0.043811f, 0.016440f, -0.071448f, -0.018825f, -0.083915f, -0.050552f, 0.001389f, -0.099731f, -0.011661f, -0.055724f, -0.038660f, -0.011181f, -0.044498f, -0.046592f, -0.061600f, -0.110975f, -0.092581f, -0.146722f, -0.054465f, 0.022640f, -0.027495f, 0.052884f, -0.124647f, -0.044100f, 0.090185f, -0.056166f, 0.049620f, -0.094099f, 0.024798f, -0.007076f, -0.078109f, -0.056294f, 0.024809f,
	0.056727f, 0.056174f, 0.016328f, -0.067723f, -0.018273f, -0.089164f, -0.053246f, -0.004474f, -0.088775f, -0.016960f, -0.055755f, -0.049357f, -0.003393f, -0.057029f, -0.057944f, -0.078602f, -0.116320f, -0.116419f, -0.135346f, -0.065112f, 0.031714f, -0.026089f, 0.053926f, -0.146501f, -0.088218f, 0.112238f, -0.073090f, 0.019614f, -0.073331f, -0.010391f, -0.016316f, -0.081091f, -0.101346f, 0.033206f,
	0.053863f, 0.070189f, 0.002551f, -0.055065f, 0.015300f, -0.088786f, -0.052051f, 0.006288f, -0.079362f, 0.003819f, -0.069097f, -0.028654f, -0.012574f, -0.043552f, -0.060415f, -0.082841f, -0.030205f, -0.090290f, -0.056654f, -0.010515f, -0.026259f, 0.018692f, -0.060457f, -0.049003f, -0.020092f, 0.013016f, -0.079443f, 0.055920f, -0.044095f, -0.132379f, -0.069462f, -0.028557f, -0.081805f, -0.014368f,
	0.054487f, 0.052156f, -0.025662f, -0.043672f, 0.038234f, -0.097652f, -0.061550f, 0.009141f, -0.091552f, -0.018906f, -0.073348f, -0.023368f, -0.035182f, -0.019426f, -0.067143f, -0.077651f, 0.000840f, -0.064016f, -0.050794f, 0.012015f, -0.070276f, -0.009742f, -0.116913f, 0.009872f, 0.004210f, -0.020941f, -0.054064f, 0.033929f, -0.041700f, -0.124288f, -0.068147f, -0.077671f, -0.106441f, -0.047888f,
	0.053071f, 0.036339f, -0.025735f, -0.047996f, 0.041005f, -0.100444f, -0.057829f, 0.013845f, -0.101921f, -0.018419f, -0.077645f, -0.013513f, -0.041059f, -0.010444f, -0.059771f, -0.061024f, 0.005044f, -0.056949f, -0.052826f, 0.026317f, -0.078409f, -0.007588f, -0.129995f, 0.033848f, 0.029133f, -0.047594f, -0.035022f, 0.047235f, -0.058100f, -0.091996f, -0.054179f, -0.066075f, -0.078103f, -0.046683f,
	-0.031460f, -0.013987f, -0.149818f, 0.080350f, 0.020681f, -0.057818f, 0.011712f, -0.001008f, 0.061313f, 0.017201f, 0.005085f, 0.074818f, -0.047190f, 0.015967f, -0.029569f, 0.136405f, 0.070269f, -0.039349f, 0.090760f, -0.058563f, 0.065843f, 0.078259f, -0.020924f, -0.163454f, -0.040312f, -0.104189f, 0.069961f, 0.035861f, 0.064290f, 0.042196f, 0.239137f, -0.024848f, 0.084332f, -0.100068f,
	-0.002327f, -0.017521f, -0.139425f, 0.070865f, 0.048305f, 0.079434f, -0.035213f, -0.026484f, 0.062642f, 0.070813f, -0.027307f, 0.065759f, -0.050332f, -0.068535f, -0.050488f, 0.065260f, -0.034808f, 0.001184f, 0.022065f, -0.018875f, 0.057119f, -0.010911f, -0.054658f, -0.020400f, -0.028406f, -0.025774f, 0.004056f, 0.020749f, -0.040770f, 0.067283f, 0.024925f, 0.111530f, 0.079035f, -0.073362f,
	-0.000584f, -0.011118f, -0.122177f, 0.051211f, 0.037283f, 0.151535f, -0.057755f, -0.043066f, 0.075106f, 0.105702f, -0.045195f, 0.033969f, -0.051730f, -0.086152f, -0.035502f, 0.008973f, -0.086193f, 0.022393f, -0.032203f, -0.010625f, 0.037487f, 0.012267f, -0.063710f, 0.003409f, 0.012534f, 0.018225f, -0.069447f, -0.045926f, -0.057301f, 0.086177f, -0.125110f, 0.108154f, 0.062487f, -0.033929f,
	0.000480f, -0.003086f, -0.124476f, 0.057127f, 0.033887f, 0.149034f, -0.061112f, -0.048529f, 0.070950f, 0.110661f, -0.040134f, 0.025767f, -0.039288f, -0.067746f, -0.045629f, 0.005133f, -0.081370f, 0.017086f, -0.037104f, -0.021039f, 0.008034f, -0.013678f, -0.051069f, 0.002511f, 0.032016f, 0.008503f, -0.097044f, -0.037501f, -0.056407f, 0.051508f, -0.144414f, 0.076356f, 0.059066f, -0.021945f,
	-0.000559f, 0.003997f, -0.124027f, 0.053465f, 0.037579f, 0.149996f, -0.049979f, -0.055144f, 0.070483f, 0.113771f, -0.040946f, 0.023671f, -0.042610f, -0.080241f, -0.054001f, 0.002411f, -0.078521f, 0.019903f, -0.057589f, -0.015049f, -0.008310f, -0.005005f, -0.034476f, 0.006235f, 0.033286f, 0.024151f, -0.120019f, 0.018377f, -0.072419f, 0.051602f, -0.134832f, 0.064370f, 0.037586f, 0.038711f,
	-0.000565f, 0.012494f, -0.144971f, 0.071663f, 0.048838f, 0.081814f, -0.029624f, -0.048941f, 0.058314f, 0.080172f, -0.010279f, 0.030880f, -0.020393f, -0.055948f, -0.087529f, 0.040786f, -0.005034f, 0.001085f, -0.046251f, -0.044062f, -0.050526f, -0.012975f, 0.003798f, -0.023311f, 0.028814f, -0.002381f, -0.096432f, 0.041930f, -0.029305f, 0.030971f, -0.027834f, 0.007430f, -0.084175f, 0.004963f,
	-0.024116f, 0.030827f, -0.152081f, 0.079655f, 0.025107f, -0.047327f, 0.011967f, -0.026416f, 0.054183f, 0.040100f, 0.018945f, 0.030843f, -0.004122f, 0.017941f, -0.093164f, 0.086158f, 0.096071f, -0.024027f, 0.018254f, -0.066233f, -0.099375f, 0.036822f, 0.073623f, -0.184943f, 0.021773f, -0.066513f, -0.059088f, 0.109738f, 0.066223f, -0.037492f, 0.178023f, -0.104653f, -0.133898f, -0.056362f,
	-0.091307f, 0.021185f, 0.005452f, 0.093079f, 0.004462f, -0.137494f, 0.027255f, 0.016193f, 0.035027f, 0.043270f, 0.017597f, -0.052594f, 0.050678f, -0.017621f, -0.100552f, 0.045091f, 0.137042f, -0.020604f, 0.004831f, 0.003501f, -0.076423f, -0.058265f, 0.083175f, 0.046838f, -0.041851f, 0.066991f, 0.022783f, 0.025688f, 0.023265f, -0.031676f, 0.073439f, -0.072413f, -0.208999f, 0.025261f,
	-0.117606f, 0.016526f, 0.081068f, 0.093572f, -0.000820f, -0.179734f, 0.034199f, 0.055206f, 0.036610f, 0.045268f, 0.036467f, -0.091173f, 0.086052f, 0.019906f, -0.077335f, 0.021613f, 0.112294f, -0.024854f, 0.001051f, -0.024213f, 0.006556f, -0.070798f, 0.044003f, 0.109037f, -0.026106f, 0.108415f, 0.052460f, -0.013149f, -0.012349f, -0.024464f, -0.073565f, -0.035321f, -0.006109f, 0.085182f,
	-0.119255f, 0.013200f, 0.094025f, 0.092040f, -0.002146f, -0.181868f, 0.034095f, 0.066850f, 0.038987f, 0.042822f, 0.035705f, -0.088591f, 0.084897f, 0.040278f, -0.058173f, 0.015843f, 0.087899f, -0.013908f, 0.006996f, -0.042503f, 0.059924f, -0.066579f, 0.004384f, 0.103210f, -0.024232f, 0.105557f, 0.087612f, -0.040335f, 0.005558f, -0.016772f, -0.091889f, -0.007373f, 0.029448f, 0.052985f,
	-0.116290f, 0.010377f, 0.087191f, 0.091107f, -0.002629f, -0.185149f, 0.030103f, 0.072827f, 0.039401f, 0.035673f, 0.032489f, -0.068554f, 0.067030f, 0.041143f, -0.052476f, 0.026493f, 0.086061f, -0.007730f, 0.013083f, -0.014025f, 0.109392f, -0.074283f, -0.017676f, 0.099392f, -0.055753f, 0.103876f, 0.090079f, -0.044614f, -0.019969f, 0.012981f, -0.056802f, -0.005694f, 0.062207f, 0.013923f,
	-0.088956f, 0.002770f, 0.014073f, 0.083735f, 0.000259f, -0.146666f, 0.024624f, 0.057239f, 0.040658f, 0.024938f, 0.022137f, -0.006530f, 0.016834f, 0.033547f, -0.054639f, 0.066908f, 0.066243f, -0.006261f, 0.048043f, 0.020086f, 0.160704f, -0.046164f, -0.050282f, 0.007988f, -0.125443f, 0.055461f, 0.087275f, -0.006875f, -0.007782f, 0.054046f, 0.083770f, 0.004746f, 0.021062f, -0.066056f,
	-0.035780f, -0.013571f, -0.129727f, 0.075906f, 0.019981f, -0.033424f, -0.002959f, -0.000563f, 0.050482f, 0.021935f, 0.002944f, 0.075011f, -0.045732f, 0.001801f, -0.047564f, 0.120066f, 0.054278f, -0.033545f, 0.090304f, -0.063131f, 0.074862f, 0.062176f, -0.020091f, -0.117017f, -0.059383f, -0.080761f, 0.087965f, 0.081966f, 0.076590f, 0.065730f, 0.239584f, -0.057628f, 0.009591f, -0.117312f,
	-0.008820f, -0.007627f, -0.158056f, 0.055203f, 0.017956f, 0.077099f, -0.075129f, -0.007191f, 0.032083f, 0.085832f, -0.010026f, 0.034463f, -0.026295f, -0.045494f, -0.041653f, 0.027555f, -0.049879f, 0.009335f, 0.083404f, -0.078297f, 0.040478f, -0.117472f, 0.024219f, 0.074484f, -0.004484f, -0.034318f, -0.038895f, -0.061118f, -0.048430f, -0.005360f, -0.051358f, 0.010804f, 0.052828f, 0.036864f,
	-0.007737f, -0.003256f, -0.151791f, 0.055268f, 0.019966f, 0.087559f, -0.078741f, -0.018450f, 0.030698f, 0.091713f, -0.015450f, 0.020864f, -0.015028f, -0.032981f, -0.052983f, 0.014209f, -0.059863f, 0.016094f, 0.069445f, -0.092531f, 0.010370f, -0.126361f, 0.028344f, 0.071716f, 0.009341f, -0.033236f, -0.067826f, -0.044003f, -0.045043f, -0.018573f, -0.090383f, 0.001302f, 0.035380f, 0.033187f,
	-0.007412f, 0.002548f, -0.158757f, 0.061181f, 0.018661f, 0.073976f, -0.071983f, -0.025639f, 0.028395f, 0.091940f, 0.000206f, 0.022257f, -0.009808f, -0.034953f, -0.058116f, 0.017318f, -0.038657f, 0.005313f, 0.049993f, -0.087077f, -0.010529f, -0.130728f, 0.062698f, 0.069370f, 0.019104f, -0.031545f, -0.097670f, 0.007100f, -0.077453f, -0.016369f, -0.071504f, -0.037358f, 0.022404f, 0.093558f,
	-0.032512f, 0.028427f, -0.133433f, 0.078989f, 0.025468f, -0.028533f, 0.004691f, -0.021006f, 0.046417f, 0.047024f, 0.018770f, 0.037960f, 0.000477f, 0.007323f, -0.092459f, 0.082200f, 0.086554f, -0.011680f, 0.010444f, -0.068859f, -0.057549f, 0.014886f, 0.067619f, -0.129370f, 0.001837f, -0.039609f, -0.014336f, 0.136787f, 0.056466f, 0.005406f, 0.166161f, -0.086177f, -0.153931f, -0.065626f,
	-0.106396f, 0.012082f, 0.093804f, 0.073458f, 0.006325f, -0.122138f, 0.053986f, 0.020569f, 0.052258f, 0.097040f, -0.030117f, -0.063935f, 0.029007f, -0.048173f, -0.073480f, 0.006487f, 0.079422f, -0.018318f, -0.098277f, 0.085998f, -0.045678f, 0.124596f, -0.056062f, -0.009915f, 0.115255f, 0.082543f, 0.043762f, 0.055274f, 0.033651f, 0.018777f, -0.097186f, 0.025652f, 0.107246f, 0.082007f,
	-0.108266f, 0.013196f, 0.107352f, 0.073267f, 0.005501f, -0.118182f, 0.053900f, 0.026988f, 0.059629f, 0.098678f, -0.033463f, -0.059244f, 0.030748f, -0.021010f, -0.048874f, -0.003174f, 0.046149f, -0.004115f, -0.096188f, 0.073125f, -0.013743f, 0.137679f, -0.084938f, -0.025411f, 0.119975f, 0.081742f, 0.078842f, 0.041866f, 0.054237f, 0.044745f, -0.113358f, 0.068330f, 0.125398f, 0.071168f,
	-0.105677f, 0.013856f, 0.100276f, 0.068541f, 0.007179f, -0.120756f, 0.052194f, 0.033207f, 0.056095f, 0.092773f, -0.030246f, -0.037497f, 0.018805f, -0.020756f, -0.042271f, 0.009948f, 0.041864f, 0.000654f, -0.101674f, 0.096004f, 0.022386f, 0.126403f, -0.085055f, -0.027232f, 0.087129f, 0.079991f, 0.091934f, 0.037413f, 0.035609f, 0.080869f, -0.077055f, 0.068696f, 0.147811f, 0.051447f,
	0.200300f, 0.206381f, 0.037666f, -0.062044f, 0.105603f, 0.039287f, 0.129443f, -0.026108f, -0.006145f, 0.008167f, -0.180506f, -0.005344f, -0.154896f, 0.029728f, -0.078524f, -0.093022f, 0.282292f, 0.094500f, -0.012038f, -0.075772f, -0.007254f, 0.075631f, -0.021364f, -0.032209f, 0.106197f, -0.033075f, -0.057528f, -0.036911f, -0.079279f, -0.070271f, 0.134924f, 0.050103f, 0.176129f, 0.174669f,
	0.174909f, 0.262626f, 0.001650f, -0.050760f, 0.056767f, 0.046800f, 0.116679f, 0.016697f, 0.036953f, -0.001587f, -0.129708f, -0.018479f, -0.077744f, 0.017170f, -0.006678f, -0.084015f, 0.149428f, 0.003802f, 0.023948f, -0.034466f, -0.037293f, 0.015672f, -0.028566f, 0.018799f, 0.029636f, -0.058638f, 0.022368f, -0.067504f, -0.036674f, -0.038199f, 0.101980f, -0.006688f, 0.114199f, 0.092127f,
	0.145419f, 0.271569f, -0.034873f, -0.044417f, -0.005370f, 0.054598f, 0.106804f, 0.058877f, 0.047845f, -0.006222f, -0.038196f, -0.028624f, 0.051275f, 0.021585f, -0.019610f, -0.032440f, -0.042228f, -0.040054f, 0.010931f, -0.080129f, -0.032979f, -0.037624f, 0.046956f, 0.005674f, -0.043045f, -0.070160f, 0.084897f, -0.059861f, 0.011866f, -0.020727f, 0.016502f, -0.105536f, 0.054309f, 0.077813f,
	0.121784f, 0.205203f, -0.040615f, -0.025224f, -0.078037f, 0.055910f, 0.087096f, 0.101567f, 0.032281f, 0.047114f, 0.067450f, -0.029754f, 0.115044f, 0.004978f, -0.002689f, 0.033261f, -0.183060f, -0.118272f, -0.032756f, -0.083449f, -0.036678f, -0.109978f, 0.089839f, -0.018425f, -0.047398f, -0.071371f, 0.132785f, -0.079312f, 0.053450f, -0.016013f, -0.087251f, -0.136778f, 0.010646f, 0.048749f,
	0.133914f, 0.102310f, -0.020287f, 0.004986f, -0.141709f, 0.003779f, 0.009098f, 0.120102f, -0.047440f, 0.060693f, 0.150862f, 0.032856f, 0.123342f, 0.036340f, 0.053349f, 0.081323f, -0.106337f, -0.089787f, -0.055918f, 0.076288f, 0.022085f, -0.032767f, 0.044374f, -0.049343f, -0.054487f, -0.077724f, 0.094554f, -0.099233f, 0.070220f, 0.032782f, -0.134028f, -0.176615f, 0.058256f, -0.110604f,
	0.136156f, 0.012237f, 0.028350f, 0.055205f, -0.144687f, -0.046150f, -0.025253f, 0.036940f, -0.082417f, 0.046931f, 0.140621f, 0.125137f, 0.070684f, 0.035326f, 0.117788f, 0.115735f, 0.014819f, -0.011779f, -0.095812f, 0.103471f, 0.027698f, 0.015841f, -0.045732f, -0.086235f, -0.100680f, -0.049399f, -0.026388f, -0.094643f, 0.100905f, 0.044076f, -0.187605f, -0.094315f, 0.003539f, -0.202719f,
	0.096825f, -0.052123f, 0.057933f, 0.114355f, -0.098038f, -0.121617f, -0.055895f, -0.022068f, -0.059251f, -0.000028f, 0.053843f, 0.302609f, -0.066475f, 0.059366f, 0.163306f, 0.029775f, 0.086102f, 0.037617f, -0.004275f, 0.136346f, -0.030689f, 0.070476f, -0.032601f, -0.031896f, -0.043260f, -0.110607f, -0.181097f, 0.120911f, 0.098080f, 0.036017f, -0.155625f, -0.014093f, -0.023635f, -0.063091f,
	0.053280f, -0.060018f, 0.037506f, 0.137972f, 0.011258f, -0.178318f, -0.023102f, -0.051378f, -0.072595f, -0.086067f, 0.000313f, 0.285580f, -0.051029f, -0.025127f, 0.085024f, -0.036423f, 0.014116f, 0.013590f, 0.100603f, 0.056762f, -0.064465f, -0.011526f, 0.015876f, -0.005954f, 0.118192f, -0.107172f, -0.166406f, 0.124543f, 0.111421f, 0.028985f, -0.074010f, 0.076955f, -0.032659f, 0.141702f,
	0.045574f, -0.013216f, 0.032142f, 0.093571f, 0.050167f, -0.171049f, 0.052834f, -0.067576f, -0.122586f, -0.148784f, -0.054492f, 0.096339f, -0.018259f, -0.062274f, -0.040250f, -0.143567f, -0.086938f, 0.063209f, 0.139416f, -0.029860f, -0.021312f, -0.063067f, 0.038636f, 0.074870f, 0.004951f, -0.015358f, -0.118334f, -0.004443f, 0.136427f, 0.102426f, 0.070536f, 0.141456f, -0.079749f, 0.125498f,
	0.059666f, 0.033773f, 0.011922f, 0.066781f, 0.019188f, -0.136499f, 0.012310f, -0.053448f, -0.112842f, -0.162605f, -0.033516f, -0.083470f, 0.040366f, -0.073418f, -0.073634f, -0.134124f, -0.183406f, 0.070520f, 0.140600f, -0.024180f, 0.078113f, -0.014717f, -0.030918f, 0.055699f, -0.059861f, -0.024527f, -0.045187f, -0.018538f, 0.147098f, 0.098916f, 0.092276f, 0.126182f, -0.051521f, 0.096536f,
	0.102008f, 0.062652f, 0.002559f, 0.033904f, -0.034709f, -0.028794f, -0.029963f, -0.001155f, -0.088109f, -0.139233f, -0.017772f, -0.206193f, 0.050147f, -0.078321f, -0.066908f, -0.098039f, -0.008521f, 0.078240f, 0.003116f, -0.115075f, 0.170119f, 0.063555f, 0.042319f, 0.085075f, -0.085497f, -0.000332f, -0.058397f, -0.013971f, 0.095261f, -0.001791f, 0.088311f, 0.169500f, -0.076125f, -0.011915f,
	0.130156f, 0.030796f, -0.028981f, 0.037504f, -0.110897f, 0.045667f, -0.073986f, 0.097997f, -0.071465f, -0.114585f, 0.024864f, -0.164295f, 0.078517f, -0.068363f, -0.064291f, -0.015782f, 0.086141f, -0.030675f, -0.057981f, -0.071696f, 0.160759f, 0.037941f, 0.106627f, -0.011196f, 0.036540f, -0.017581f, -0.051521f, 0.093436f, -0.051622f, -0.102102f, 0.046722f, 0.156601f, 0.065388f, -0.029184f,
	0.168973f, -0.048346f, -0.054128f, 0.028599f, -0.159253f, 0.088824f, -0.040072f, 0.101158f, -0.015747f, -0.066487f, 0.069651f, -0.136555f, 0.131030f, -0.095612f, 0.005098f, 0.051930f, 0.141634f, -0.059902f, -0.077737f, -0.001406f, 0.060549f, 0.016779f, 0.073755f, -0.079590f, 0.025474f, 0.002819f, -0.008349f, 0.092361f, -0.102785f, -0.130624f, 0.011078f, 0.134838f, 0.105198f, -0.029608f,
	0.196868f, -0.140552f, -0.038053f, 0.030363f, -0.136280f, 0.109791f, 0.082851f, 0.031947f, -0.010593f, 0.024018f, 0.071666f, -0.120218f, 0.158965f, -0.056053f, -0.005157f, 0.089872f, 0.082277f, -0.037538f, -0.032307f, -0.004000f, -0.077070f, -0.047653f, -0.036306f, -0.059558f, -0.007532f, 0.012245f, 0.064610f, 0.069522f, -0.100870f, -0.125037f, -0.000483f, 0.105122f, 0.004543f, -0.031563f,
	0.220722f, -0.189143f, -0.019812f, 0.050177f, -0.022114f, 0.078768f, 0.141034f, -0.059095f, -0.020072f, 0.062754f, 0.030385f, -0.038935f, 0.084110f, -0.009296f, 0.007037f, 0.034972f, 0.032848f, -0.022511f, 0.007807f, 0.025446f, -0.154512f, -0.055275f, -0.065423f, 0.057532f, 0.001583f, -0.000069f, 0.148740f, 0.038380f, -0.084950f, -0.055361f, -0.005477f, 0.024714f, -0.104505f, -0.036786f,
	0.226640f, -0.179498f, 0.049226f, 0.043510f, 0.105148f, -0.008538f, 0.147024f, -0.091442f, -0.062929f, 0.109845f, 0.005074f, 0.058119f, 0.017767f, 0.089994f, -0.044924f, -0.062390f, -0.007394f, 0.037390f, 0.010439f, -0.015520f, -0.064619f, 0.042369f, -0.058993f, 0.055481f, -0.000104f, 0.024385f, 0.166181f, 0.000132f, -0.087429f, 0.021365f, -0.001406f, -0.118401f, -0.061089f, 0.025621f,
	0.236683f, -0.154942f, 0.112382f, 0.048015f, 0.188712f, -0.046365f, 0.145337f, -0.144361f, -0.102570f, 0.165949f, -0.050088f, 0.165649f, -0.012631f, 0.142407f, -0.082270f, -0.087023f, 0.021488f, 0.106059f, -0.048916f, -0.157005f, 0.118604f, 0.107512f, -0.049746f, -0.120962f, 0.092471f, 0.115214f, 0.092679f, -0.156215f, -0.070360f, 0.083441f, -0.097703f, -0.215489f, -0.072382f, 0.027100f,
	0.098748f, -0.110249f, 0.040632f, 0.106294f, 0.034691f, 0.030852f, -0.096378f, -0.114844f, 0.076385f, 0.054995f, -0.090801f, -0.147677f, 0.060390f, 0.097064f, -0.014503f, -0.075035f, -0.111119f, -0.058225f, -0.072715f, 0.091030f, 0.140176f, -0.115472f, -0.124135f, 0.002804f, -0.034399f, 0.069021f, -0.071552f, 0.126436f, 0.208688f, -0.064774f, 0.167890f, 0.023198f, 0.065838f, -0.115322f,
	0.045293f, -0.089374f, 0.018089f, 0.085862f, 0.012661f, -0.008385f, -0.067383f, -0.079743f, -0.026056f, 0.045936f, -0.103235f, -0.087935f, 0.099554f, 0.036145f, -0.034997f, -0.024818f, -0.088738f, 0.005542f, -0.088960f, 0.117580f, 0.051157f, -0.047818f, -0.031283f, 0.050240f, -0.019133f, 0.069263f, -0.073513f, 0.173658f, 0.080920f, -0.038285f, 0.140359f, -0.084856f, 0.069031f, -0.038620f,
	-0.004362f, -0.070045f, -0.005441f, 0.028721f, -0.035581f, 0.008714f, -0.023807f, -0.055672f, -0.056772f, 0.019390f, -0.051096f, -0.030542f, 0.150701f, -0.048870f, -0.050577f, 0.013535f, -0.059832f, 0.055515f, -0.059955f, 0.062922f, 0.041041f, 0.043294f, -0.006914f, 0.139734f, -0.004182f, 0.051132f, -0.044750f, 0.176739f, 0.008876f, -0.029887f, 0.077004f, -0.117767f, 0.056034f, -0.030393f,
	-0.046908f, -0.055997f, -0.030801f, -0.012931f, -0.095239f, 0.007226f, 0.007382f, -0.049966f, -0.065128f, -0.036849f, -0.026556f, 0.024951f, 0.158839f, -0.114967f, -0.061207f, 0.047650f, -0.045883f, 0.050290f, 0.011314f, 0.022440f, -0.012041f, 0.017932f, 0.042840f, 0.074523f, 0.063977f, 0.076758f, -0.024231f, 0.082162f, -0.002699f, -0.024259f, 0.019286f, -0.035404f, 0.016136f, -0.056954f,
	-0.084798f, -0.042180f, -0.051749f, -0.022690f, -0.163003f, -0.027359f, 0.032238f, -0.030906f, -0.064720f, -0.018269f, -0.007672f, 0.068355f, 0.116840f, -0.135774f, -0.081552f, 0.048596f, -0.080784f, 0.017814f, 0.146383f, 0.045115f, -0.164446f, -0.039490f, 0.025936f, 0.042829f, 0.216153f, 0.010996f, 0.006383f, 0.024871f, 0.002893f, -0.034911f, -0.009591f, 0.024318f, -0.029688f, -0.025116f,
	-0.106381f, 0.037472f, -0.062633f, -0.029746f, -0.165792f, -0.010239f, 0.012509f, -0.033520f, 0.075020f, 0.048760f, 0.008410f, 0.182188f, 0.245250f, 0.004609f, -0.187742f, -0.114282f, -0.018821f, 0.047174f, 0.096399f, 0.074864f, -0.071890f, 0.002693f, 0.007320f, 0.000897f, 0.070591f, 0.012206f, -0.053249f, -0.072801f, 0.098886f, -0.111274f, 0.027638f, 0.030143f, 0.068139f, 0.024639f,
	-0.081730f, 0.078091f, -0.032084f, -0.016937f, -0.094799f, -0.034978f, -0.035412f, -0.016776f, 0.073337f, 0.010988f, -0.014905f, 0.221079f, 0.199761f, -0.067149f, -0.096254f, -0.041963f, 0.032786f, 0.009098f, 0.047313f, -0.051221f, -0.021669f, 0.051603f, 0.007726f, -0.033954f, -0.118397f, 0.100014f, -0.080501f, -0.162248f, 0.076284f, -0.144372f, 0.005300f, 0.030886f, 0.089261f, -0.018362f,
	-0.032591f, 0.093392f, 0.005011f, 0.033984f, -0.033653f, -0.056018f, -0.045205f, -0.034382f, 0.054241f, 0.038895f, -0.028006f, 0.147818f, 0.118347f, -0.066122f, -0.022476f, 0.025348f, -0.024972f, -0.006291f, 0.042302f, -0.124172f, 0.007567f, 0.044630f, 0.010710f, 0.049093f, -0.093271f, 0.092758f, -0.055927f, -0.139825f, 0.084283f, -0.141690f, 0.001749f, -0.018718f, 0.034520f, -0.013745f,
	0.025131f, 0.111171f, 0.052338f, 0.093959f, 0.036120f, -0.076090f, -0.055111f, -0.055018f, 0.028419f, 0.039071f, -0.021446f, 0.070711f, -0.045120f, 0.015776f, 0.119003f, 0.157191f, -0.056194f, -0.037864f, -0.019407f, -0.101495f, -0.025226f, -0.020203f, 0.081456f, 0.053677f, 0.018315f, 0.139230f, -0.090725f, -0.024605f, 0.076010f, -0.142354f, 0.011727f, -0.028982f, 0.009696f, 0.010824f,
	0.086343f, 0.128544f, 0.089920f, 0.151910f, 0.118411f, -0.058267f, -0.085331f, -0.086356f, 0.086411f, 0.023158f, -0.022226f, -0.036163f, -0.177136f, 0.077261f, 0.277540f, 0.318083f, -0.140120f, -0.082366f, -0.088998f, -0.072522f, -0.066982f, 0.005449f, 0.106803f, 0.086831f, 0.077782f, 0.142782f, -0.071544f, 0.132130f, 0.111582f, -0.160749f, 0.004996f, 0.042392f, -0.012883f, 0.064412f,
	-0.061540f, 0.002620f, -0.073689f, 0.003550f, -0.071570f, -0.007284f, 0.013967f, -0.001633f, -0.094799f, -0.008264f, -0.030895f, 0.022099f, 0.055730f, 0.034688f, -0.025540f, -0.038442f, -0.002687f, -0.049120f, 0.053353f, 0.026489f, 0.022921f, 0.048577f, -0.071688f, 0.080905f, 0.064980f, 0.013782f, -0.014355f, -0.070959f, -0.107091f, 0.226291f, 0.009386f, 0.025020f, -0.005604f, -0.092437f,
	-0.083267f, -0.013381f, -0.104616f, -0.054605f, -0.053350f, -0.040950f, 0.035114f, 0.002258f, -0.090956f, -0.033881f, -0.040826f, 0.018097f, 0.028479f, 0.074550f, 0.001071f, 0.021358f, 0.041581f, -0.040821f, 0.048402f, 0.008007f, 0.052241f, 0.038045f, -0.031619f, 0.029420f, 0.021501f, 0.017835f, -0.011740f, -0.040020f, -0.113478f, 0.098608f, -0.030604f, 0.032750f, 0.004352f, -0.062761f,
	-0.112570f, -0.029556f, -0.131694f, -0.107775f, -0.048902f, -0.072433f, 0.059086f, 0.003800f, -0.085443f, -0.052929f, -0.057306f, 0.008400f, 0.005223f, 0.134826f, 0.035720f, 0.064559f, 0.065656f, -0.055342f, 0.042012f, 0.015993f, 0.045317f, 0.026565f, 0.036061f, -0.016830f, -0.006164f, 0.013784f, -0.005233f, 0.023644f, -0.106323f, 0.001697f, -0.058936f, 0.048287f, 0.020797f, -0.018860f,
	-0.138208f, -0.042880f, -0.154716f, -0.161145f, -0.036682f, -0.087614f, 0.078138f, -0.004009f, -0.085960f, -0.078308f, -0.075158f, -0.013667f, -0.009818f, 0.193081f, 0.069946f, 0.112698f, 0.091929f, -0.063611f, 0.052582f, 0.024224f, 0.037179f, 0.031363f, 0.096072f, -0.069509f, -0.079675f, 0.025210f, -0.001654f, 0.058541f, -0.103434f, -0.086341f, -0.084715f, 0.091389f, 0.038254f, 0.015236f,
	-0.071614f, -0.025433f, -0.079555f, -0.044231f, -0.056001f, 0.003353f, 0.020448f, 0.039313f, -0.034449f, 0.021201f, -0.079939f, 0.028644f, -0.024787f, 0.188439f, 0.060152f, 0.035784f, 0.042994f, 0.023862f, -0.002200f, -0.094819f, -0.024939f, 0.021039f, 0.009160f, -0.055080f, -0.021112f, -0.045149f, -0.025621f, 0.216443f, -0.029294f, 0.072591f, -0.079226f, -0.017757f, 0.067523f, 0.075291f,
	-0.072195f, -0.021031f, -0.121170f, -0.072247f, -0.036905f, -0.070614f, 0.012662f, 0.040015f, -0.043028f, 0.012293f, -0.078126f, -0.030670f, -0.033902f, 0.118408f, 0.040616f, 0.048834f, 0.050552f, 0.038276f, 0.008483f, -0.058060f, -0.034078f, -0.041976f, -0.009228f, -0.045368f, -0.013261f, -0.068158f, 0.022561f, 0.132560f, 0.004265f, -0.025965f, -0.059467f, -0.019725f, 0.063179f, 0.097074f,
	-0.083844f, -0.027702f, -0.148124f, -0.094158f, -0.023167f, -0.103209f, 0.009646f, 0.023882f, -0.042179f, 0.000862f, -0.043166f, -0.071528f, -0.042289f, 0.065372f, 0.035839f, 0.017436f, 0.064917f, 0.010734f, 0.049860f, -0.058510f, -0.037633f, -0.085134f, -0.033890f, -0.026309f, -0.004119f, -0.070958f, 0.080402f, -0.027002f, 0.048232f, -0.088265f, -0.053340f, 0.014549f, 0.001863f, 0.085118f,
	-0.077701f, -0.032876f, -0.116524f, -0.069424f, -0.039070f, -0.071006f, 0.000686f, 0.000032f, -0.060440f, -0.009999f, -0.033027f, -0.093775f, -0.041865f, 0.049000f, 0.019074f, 0.068912f, 0.042780f, 0.002562f, 0.084029f, -0.024194f, 0.004517f, -0.150073f, -0.009540f, -0.075583f, 0.001970f, -0.012793f, 0.069308f, -0.097943f, 0.026051f, -0.040273f, -0.046429f, -0.037232f, -0.075387f, 0.056425f,
	-0.073314f, -0.025474f, -0.086713f, -0.034135f, -0.056786f, -0.033425f, -0.010800f, -0.006306f, -0.083626f, -0.019529f, -0.023848f, -0.103377f, -0.072124f, 0.027925f, 0.038858f, 0.096703f, 0.015690f, 0.004385f, 0.117400f, -0.019385f, 0.068925f, -0.151549f, 0.006375f, -0.118295f, 0.070831f, 0.037136f, 0.042043f, -0.099400f, -0.017748f, 0.020165f, -0.062059f, -0.092214f, -0.152389f, 0.036151f,
	0.044589f, -0.132278f, -0.016993f, 0.083882f, 0.043778f, -0.034594f, -0.072011f, 0.039110f, -0.046069f, -0.040587f, 0.123917f, -0.047575f, -0.122385f, -0.035400f, -0.024195f, -0.012518f, 0.013652f, 0.031937f, 0.019659f, -0.001715f, 0.023088f, -0.000309f, -0.031436f, 0.022571f, 0.019611f, -0.006564f, 0.012784f, 0.083317f, -0.104572f, 0.062104f, 0.000647f, -0.056669f, 0.044672f, 0.004338f,
	0.016329f, -0.109007f, -0.005045f, 0.067630f, 0.019108f, -0.002645f, -0.071902f, 0.025076f, 0.007237f, -0.051092f, 0.091200f, -0.100586f, -0.101496f, -0.065336f, -0.015376f, 0.013166f, 0.008475f, 0.063623f, 0.047215f, 0.020495f, -0.013691f, 0.030534f, 0.016318f, -0.010397f, -0.023315f, 0.035663f, -0.023907f, 0.042304f, -0.100402f, 0.062642f, -0.013752f, 0.012255f, 0.032336f, 0.012548f,
	0.005789f, -0.090540f, 0.006017f, 0.048376f, -0.000562f, -0.003770f, -0.064679f, 0.019118f, 0.018765f, -0.056858f, 0.072645f, -0.105570f, -0.099008f, -0.063197f, -0.036400f, 0.020176f, 0.006068f, 0.073862f, 0.022493f, -0.014200f, -0.022956f, 0.011319f, 0.028866f, -0.059130f, 0.024068f, 0.043375f, -0.037957f, 0.009386f, -0.070164f, 0.052847f, -0.054076f, 0.043887f, 0.014360f, -0.001251f,
	0.001863f, -0.067279f, -0.004424f, 0.022537f, -0.021339f, 0.004205f, -0.062496f, 0.031100f, 0.053349f, -0.011934f, 0.065752f, -0.132376f, -0.118604f, -0.084354f, 0.018198f, 0.004240f, -0.004340f, 0.003937f, 0.017652f, -0.050848f, 0.024164f, -0.013728f, -0.034087f, -0.019119f, 0.077051f, 0.006899f, 0.013968f, -0.043247f, -0.030695f, 0.066883f, -0.075176f, -0.002876f, 0.013993f, -0.016796f,
	0.005001f, -0.090158f, -0.011976f, 0.055472f, -0.011104f, -0.019645f, -0.061557f, 0.044266f, 0.027270f, -0.030345f, 0.068012f, -0.132701f, -0.097672f, -0.062167f, -0.026502f, -0.015816f, -0.002765f, 0.014242f, 0.048233f, 0.014931f, 0.013361f, 0.021076f, -0.002662f, -0.047362f, 0.074697f, -0.011056f, 0.032939f, 0.005948f, -0.057100f, 0.111103f, -0.023048f, -0.033487f, -0.004465f, 0.045128f,
	0.012182f, -0.107450f, -0.027021f, 0.065245f, 0.008961f, -0.027772f, -0.074458f, 0.050282f, 0.025229f, -0.041151f, 0.086397f, -0.119923f, -0.099702f, -0.055513f, -0.011844f, -0.012761f, -0.000561f, 0.025024f, 0.077500f, 0.042190f, 0.004065f, 0.022608f, -0.020626f, -0.014056f, 0.026667f, -0.025100f, 0.039847f, 0.066569f, -0.072695f, 0.106463f, 0.007401f, -0.072767f, 0.005736f, 0.071139f,
	-0.009462f, 0.065949f, -0.034941f, 0.008894f, -0.064655f, -0.020166f, -0.060698f, 0.028627f, 0.066320f, 0.002801f, 0.040050f, 0.031191f, -0.045838f, 0.048249f, 0.022311f, -0.088733f, 0.012498f, 0.012592f, -0.012528f, -0.038889f, 0.028963f, -0.007368f, -0.006653f, 0.082948f, -0.006713f, 0.005645f, -0.025498f, -0.054304f, -0.022462f, 0.175263f, -0.039024f, -0.042552f, -0.094353f, -0.013449f,
	0.000399f, 0.075432f, -0.010525f, 0.041532f, -0.020281f, -0.016042f, -0.094246f, 0.065468f, 0.057754f, -0.013075f, 0.035003f, 0.037001f, -0.063322f, 0.051499f, 0.004328f, -0.061380f, -0.015256f, 0.001025f, -0.051518f, 0.003395f, -0.032991f, 0.024094f, 0.008757f, 0.054130f, -0.053594f, 0.010905f, -0.022832f, -0.025114f, -0.048340f, 0.149929f, -0.021867f, 0.081009f, -0.007931f, -0.009067f,
	0.011378f, 0.085467f, -0.017111f, 0.041300f, -0.001692f, -0.039680f, -0.104984f, 0.079709f, 0.063221f, -0.028397f, 0.048561f, 0.041353f, -0.084814f, 0.040411f, 0.000268f, -0.038789f, -0.000559f, -0.008586f, -0.044596f, 0.040237f, -0.063474f, -0.003204f, -0.031149f, 0.016331f, -0.050858f, 0.018453f, -0.008099f, -0.080392f, -0.015774f, 0.091864f, -0.016377f, 0.134277f, 0.049921f, -0.027301f,
	0.029766f, 0.102153f, -0.038143f, 0.053924f, 0.038638f, -0.061103f, -0.101860f, 0.090831f, 0.056649f, -0.017724f, 0.060045f, 0.040849f, -0.108462f, 0.025297f, 0.013784f, -0.048798f, 0.017389f, -0.036169f, -0.049864f, 0.021916f, -0.066484f, 0.016243f, -0.106255f, -0.005066f, -0.033200f, -0.008221f, 0.050207f, -0.137478f, 0.022810f, 0.034341f, -0.021252f, 0.120671f, 0.042481f, -0.025859f,
	0.006889f, 0.087347f, -0.040353f, 0.029840f, -0.010245f, -0.040820f, -0.091202f, 0.072685f, 0.079209f, -0.016224f, 0.043485f, -0.001910f, -0.084857f, 0.044870f, -0.001342f, -0.071705f, -0.002282f, -0.026485f, -0.039688f, 0.033741f, -0.055799f, -0.013397f, -0.029281f, 0.000374f, -0.037317f, -0.004296f, 0.042230f, -0.104897f, 0.024080f, 0.125291f, 0.011644f, 0.079126f, -0.013272f, 0.018850f,
	-0.000936f, 0.077182f, -0.035678f, 0.029087f, -0.033747f, -0.023682f, -0.089809f, 0.060071f, 0.081219f, -0.000659f, 0.033152f, -0.007048f, -0.054525f, 0.054060f, -0.010472f, -0.078847f, -0.000530f, -0.009111f, -0.033111f, 0.004942f, -0.009483f, 0.002476f, 0.026701f, 0.054112f, -0.050766f, -0.014615f, 0.013950f, -0.054182f, -0.017408f, 0.176648f, 0.019946f, -0.001332f, -0.069141f, 0.058993f,
	-0.053340f, -0.049736f, 0.202485f, -0.040699f, 0.016891f, 0.098603f, -0.079165f, 0.012530f, -0.068702f, 0.013827f, -0.018413f, 0.064039f, -0.096530f, -0.107456f, -0.034620f, 0.115038f, 0.176489f, 0.048911f, 0.043125f, -0.004140f, 0.021027f, -0.096280f, 0.063451f, 0.033838f, -0.029605f, 0.024958f, -0.044214f, -0.018466f, -0.082116f, -0.029533f, 0.007344f, -0.061482f, 0.038981f, -0.084020f,
	-0.084313f, -0.038019f, 0.077710f, -0.058798f, 0.076335f, 0.124114f, -0.036329f, -0.056135f, -0.011941f, 0.019801f, -0.032605f, 0.049799f, -0.014743f, -0.022984f, -0.023983f, 0.002739f, 0.115499f, 0.010250f, -0.071667f, 0.052221f, 0.028701f, -0.018035f, 0.046885f, 0.065758f, -0.088996f, 0.058902f, 0.045509f, 0.021842f, 0.012293f, -0.058012f, -0.054652f, -0.028210f, -0.045572f, 0.005237f,
	-0.092694f, -0.031386f, -0.029516f, -0.066011f, 0.056512f, 0.140318f, 0.017759f, -0.055408f, 0.042409f, -0.001841f, -0.047881f, 0.006271f, -0.044880f, 0.010562f, -0.008572f, -0.032142f, 0.031237f, 0.011784f, -0.071950f, -0.017154f, 0.021388f, 0.094393f, -0.059446f, -0.036018f, -0.074495f, 0.032641f, 0.092606f, 0.062712f, 0.134488f, -0.112228f, -0.109084f, 0.090907f, -0.032517f, 0.032689f,
	-0.086068f, -0.007082f, -0.045041f, -0.060765f, 0.055270f, 0.132259f, 0.009008f, -0.042025f, 0.050070f, -0.002958f, -0.051816f, 0.001503f, -0.066612f, -0.017554f, -0.020320f, -0.047269f, 0.007336f, 0.021029f, -0.065278f, 0.045943f, 0.031788f, 0.044150f, -0.060233f, -0.015205f, -0.047170f, 0.032557f, 0.110315f, 0.067668f, 0.142436f, -0.112995f, -0.095937f, 0.043696f, -0.053263f, 0.018166f,
	-0.089411f, 0.023741f, -0.038912f, -0.067964f, 0.042282f, 0.140245f, 0.010622f, -0.036806f, 0.040610f, 0.006060f, -0.017474f, 0.000163f, -0.063926f, 0.009072f, -0.059385f, -0.064253f, -0.040611f, 0.016892f, -0.098455f, 0.064721f, 0.042317f, 0.071934f, -0.068174f, -0.023171f, -0.006137f, 0.021292f, 0.136552f, 0.086574f, 0.159669f, -0.085905f, -0.090037f, 0.025543f, -0.060574f, -0.002428f,
	-0.078575f, 0.034575f, 0.031263f, -0.073552f, 0.040647f, 0.136747f, -0.043737f, -0.008796f, 0.032331f, 0.016926f, -0.029196f, 0.043721f, -0.033823f, -0.069883f, -0.054957f, 0.000382f, 0.001785f, -0.066324f, -0.031587f, 0.075610f, 0.002026f, 0.123617f, -0.016946f, -0.073108f, 0.082295f, -0.003377f, 0.160760f, 0.045913f, 0.138259f, -0.012841f, -0.021037f, 0.019773f, -0.081271f, 0.003220f,
	-0.033366f, 0.059208f, 0.160210f, -0.064990f, 0.028624f, 0.104300f, -0.099598f, 0.045261f, -0.039277f, 0.065556f, -0.102912f, 0.108074f, -0.081503f, -0.190293f, -0.052187f, 0.075107f, 0.008671f, -0.121671f, 0.069010f, 0.122685f, -0.035632f, -0.012154f, 0.063158f, -0.139158f, 0.053250f, 0.013035f, 0.078006f, -0.006941f, 0.005533f, 0.101138f, 0.135668f, 0.005174f, -0.004429f, -0.021124f,
	-0.092656f, 0.031357f, 0.103505f, -0.059111f, 0.068764f, 0.010312f, 0.008929f, 0.034866f, 0.057992f, 0.068053f, 0.014425f, 0.007778f, 0.041020f, -0.040683f, -0.027837f, -0.022634f, -0.126523f, -0.071192f, 0.073877f, 0.037044f, -0.024998f, 0.031381f, 0.000446f, -0.063882f, 0.075465f, -0.089846f, -0.003293f, -0.014744f, -0.039966f, 0.049482f, 0.125205f, -0.021707f, -0.015263f, 0.035730f,
	-0.111708f, 0.016302f, 0.021802f, -0.017327f, 0.098757f, -0.032632f, 0.102916f, -0.004106f, 0.112659f, 0.043944f, 0.086722f, -0.075135f, 0.053748f, 0.008377f, 0.026036f, -0.051027f, -0.181615f, 0.007593f, -0.029718f, -0.022786f, -0.013286f, 0.004632f, 0.013051f, -0.001664f, 0.043884f, -0.080356f, -0.074392f, -0.041220f, -0.096235f, -0.001700f, 0.105291f, -0.079759f, -0.034690f, -0.007809f,
	-0.106284f, -0.022433f, 0.016803f, -0.009022f, 0.113956f, -0.059454f, 0.115911f, -0.012451f, 0.125340f, 0.015307f, 0.082184f, -0.057654f, 0.037795f, 0.019407f, 0.065630f, -0.026223f, -0.104086f, 0.015953f, -0.052260f, -0.022874f, -0.001840f, -0.000797f, -0.004680f, 0.054162f, 0.031667f, -0.086636f, -0.106973f, -0.052172f, -0.115387f, -0.039377f, 0.098135f, -0.063370f, -0.010368f, -0.058260f,
	-0.105834f, -0.044185f, 0.028207f, -0.010833f, 0.109847f, -0.041639f, 0.113964f, -0.035423f, 0.117943f, 0.018785f, 0.073258f, -0.043540f, 0.048715f, 0.037758f, 0.075421f, -0.003877f, -0.043429f, 0.013819f, -0.039051f, -0.084951f, -0.018739f, 0.005618f, -0.000400f, 0.028961f, 0.006799f, -0.081430f, -0.141147f, -0.095855f, -0.105823f, -0.040548f, 0.071096f, -0.022040f, -0.010334f, -0.072087f,
	-0.085770f, -0.066339f, 0.119689f, -0.034493f, 0.098418f, 0.002001f, 0.025266f, -0.023246f, 0.059661f, 0.027629f, 0.052453f, 0.022351f, 0.015313f, -0.007107f, -0.005840f, 0.096765f, 0.062508f, -0.012640f, -0.032725f, -0.080090f, -0.027756f, -0.041996f, 0.055252f, 0.063300f, -0.038983f, -0.076443f, -0.130005f, -0.083137f, -0.110099f, -0.085295f, 0.021676f, -0.004858f, 0.062427f, -0.049960f,
	-0.063490f, -0.034197f, 0.223953f, -0.071609f, 0.017273f, 0.072534f, -0.070046f, 0.008472f, -0.059151f, 0.024538f, -0.057458f, 0.054908f, -0.069500f, -0.108298f, -0.024305f, 0.086168f, 0.173404f, 0.023995f, 0.062833f, 0.058041f, 0.036625f, -0.084243f, -0.007661f, 0.049316f, -0.069261f, 0.031241f, -0.034048f, -0.059035f, -0.063512f, -0.030367f, -0.002864f, -0.044970f, 0.061520f, -0.067669f,
	-0.080995f, -0.029362f, -0.020969f, -0.037152f, 0.055714f, 0.092056f, 0.009933f, -0.025303f, 0.020523f, -0.004640f, -0.020295f, -0.009164f, -0.005931f, 0.018848f, 0.033915f, -0.030364f, 0.045067f, 0.004015f, 0.011173f, -0.058507f, 0.056901f, -0.042073f, -0.006012f, 0.046935f, -0.107241f, 0.032777f, 0.116424f, 0.038938f, 0.083070f, 0.044785f, -0.024341f, -0.040868f, -0.054497f, 0.021228f,
	-0.079570f, -0.003619f, -0.038468f, -0.043009f, 0.061929f, 0.088254f, 0.002999f, -0.017741f, 0.034379f, -0.004900f, -0.032478f, -0.019353f, -0.018212f, -0.005055f, 0.014637f, -0.048472f, -0.001520f, 0.022877f, 0.006651f, -0.017392f, 0.069312f, -0.058844f, -0.004646f, 0.065142f, -0.096265f, 0.026598f, 0.135522f, 0.071861f, 0.091550f, 0.032257f, -0.016765f, -0.075337f, -0.064651f, 0.050908f,
	-0.077037f, 0.036024f, -0.029906f, -0.041175f, 0.045056f, 0.108172f, 0.001799f, -0.013867f, 0.031473f, 0.010155f, -0.003491f, -0.014995f, -0.021891f, 0.005419f, -0.006514f, -0.067131f, -0.050711f, 0.002908f, -0.017700f, 0.003424f, 0.063512f, -0.037825f, -0.008255f, 0.061508f, -0.030670f, 0.015575f, 0.161325f, 0.090053f, 0.117788f, 0.091435f, -0.010989f, -0.096824f, -0.085735f, 0.003260f,
	-0.051962f, 0.043127f, 0.185753f, -0.068488f, 0.030906f, 0.083935f, -0.070252f, 0.031192f, -0.032752f, 0.081860f, -0.058415f, 0.100433f, -0.075819f, -0.159865f, -0.059411f, 0.067034f, 0.026048f, -0.117863f, 0.048451f, 0.078422f, -0.022589f, 0.005932f, 0.109565f, -0.086305f, 0.028208f, 0.027111f, 0.068306f, -0.018619f, -0.000395f, 0.065584f, 0.129299f, -0.018649f, -0.057046f, -0.000423f,
	-0.110771f, 0.026821f, 0.039896f, -0.026400f, 0.073464f, 0.011366f, 0.088839f, 0.010905f, 0.059433f, 0.027762f, 0.038964f, -0.069547f, 0.034358f, 0.017245f, 0.035428f, -0.063296f, -0.129262f, 0.026781f, -0.092055f, 0.071498f, -0.050266f, 0.045878f, -0.036457f, -0.040249f, 0.060855f, -0.044906f, -0.090430f, -0.018843f, -0.111822f, -0.025148f, 0.069191f, -0.000310f, -0.018828f, -0.067576f,
	-0.109310f, -0.015148f, 0.033856f, -0.022173f, 0.084027f, -0.011325f, 0.100709f, 0.004099f, 0.070556f, 0.012019f, 0.035921f, -0.046262f, 0.047837f, 0.012906f, 0.059339f, -0.023335f, -0.082080f, 0.034241f, -0.099980f, 0.038508f, -0.057517f, 0.048531f, -0.049704f, -0.033707f, 0.035725f, -0.049554f, -0.119832f, -0.033233f, -0.116399f, -0.076705f, 0.057450f, 0.017861f, 0.007758f, -0.058416f,
	-0.105002f, -0.041286f, 0.052806f, -0.020899f, 0.081333f, 0.007181f, 0.095687f, -0.011183f, 0.063719f, 0.009967f, 0.029662f, -0.037522f, 0.062980f, 0.038468f, 0.065127f, -0.003635f, -0.032995f, 0.016733f, -0.100860f, -0.006462f, -0.072928f, 0.073195f, -0.048581f, -0.059580f, 0.018777f, -0.048728f, -0.138328f, -0.072245f, -0.108275f, -0.063238f, 0.030578f, 0.066053f, 0.024802f, -0.084883f
};

static float eigen_values_mat_[] = {
	826.213804f, 695.783596f, 380.584790f, 282.861398f, 209.814481f, 184.418561f, 113.076307f, 104.852653f, 81.857546f, 77.095662f, 71.081802f, 55.760367f, 49.883312f, 39.122009f, 37.668889f, 32.916377f, 31.165932f, 26.644275f, 24.233150f, 21.357573f, 17.029065f, 15.432317f, 13.812689f, 12.440567f, 10.213426f, 9.316734f, 5.327325f, 2.526152f, 1.659451f, 1.123615f, 1.015840f, 0.816193f, 0.718969f, 0.582660f
};
 	/* initialize module variables*/
static float(*mean_shape)[1] = (float(*)[1])mean_shape_mat_;// .create(204, 1, mean_shape_mat_);
static float(*princ_comp)[NUMBER_MODES] = (float(*)[NUMBER_MODES]) princ_comp_mat_;// .create(204, 34, princ_comp_mat_);
static float(*eigen_values)[NUMBER_MODES] = (float(*)[NUMBER_MODES]) eigen_values_mat_;// .create(1, 34, eigen_values_mat_);
static float shape_3D_d[204][1];

static void Euler2RotationMatrix(const float *eulerAngles, float(*rotation_matrix)[3])
{
	float s1 = sin(eulerAngles[0]);
	float s2 = sin(eulerAngles[1]);
	float s3 = sin(eulerAngles[2]);

	float c1 = cos(eulerAngles[0]);
	float c2 = cos(eulerAngles[1]);
	float c3 = cos(eulerAngles[2]);

	rotation_matrix[0][0] = c2 * c3;
	rotation_matrix[0][1] = -c2 *s3;
	rotation_matrix[0][2] = s2;
	rotation_matrix[1][0] = c1 * s3 + c3 * s1 * s2;
	rotation_matrix[1][1] = c1 * c3 - s1 * s2 * s3;
	rotation_matrix[1][2] = -c2 * s1;
	rotation_matrix[2][0] = s1 * s3 - c1 * c3 * s2;
	rotation_matrix[2][1] = c3 * s1 + c1 * s2 * s3;
	rotation_matrix[2][2] = c1 * c2;
}

static void CalcShape2D(float (*out_shape)[1], const float (*params_local)[1], const float* params_global)
{
	int n = NUMBER_POINTS;

	float s = params_global[0]; // scaling factor
	float tx = params_global[4]; // x offset
	float ty = params_global[5]; // y offset

	// get the rotation matrix from the euler angles
	float euler[3];
	euler[0] = params_global[1];
	euler[1] = params_global[2];
	euler[2] = params_global[3];
	float currRot[3][3];
	Euler2RotationMatrix(euler, currRot);

	// get the 3D shape of the object
	float *Shape_3D = (float *)shape_3D_d;
	//Matd<float> Shape_3D = mean_shape + princ_comp * params_local; // (204,1)+(204, 36)*(36, 1) =(204,1)

	for (int row = 0; row < 204; row++)
	{
		float s = 0.0f;
		for (int col = 0; col < NUMBER_MODES; col++)
		{
			s += princ_comp[row][col] * params_local[col][0];
		}
		Shape_3D[row] = mean_shape[row][0] + s;
	}


	// for every vertex
	for (int i = 0; i < n; i++)
	{
		// Transform this using the weak-perspective mapping to 2D from 3D
		out_shape[i][0] = s * (currRot[0][0] * Shape_3D[i] + currRot[0][1] * Shape_3D[i + n] + currRot[0][2] * Shape_3D[i + n * 2]) + tx;
		out_shape[i + n][0] = s * (currRot[1][0] * Shape_3D[i] + currRot[1][1] * Shape_3D[i + n] + currRot[1][2] * Shape_3D[i + n * 2]) + ty;
	}
}

static void ComputeRigidJacobian(const float (*p_local)[1], const float *params_global, float (*Jacob)[NUM_DIR+NUMBER_MODES], float (*Jacob_t_w)[2*NUMBER_POINTS])
{
	// number of verts
	int n = NUMBER_POINTS;

// 	Jacob.create(n * 2, 6);
// 	Jacob_t_w.create(6, n * 2);

	float X, Y, Z;

	float s = (float)params_global[0];

	//float shape_3D_d[204][1];
	//shape_3D_d = mean_shape + princ_comp*p_local;// (204,1) + (204,34) * (34,1)
	
	for (int row = 0; row < 204; row++)
	{
		float sum = 0.0f;
		for (int col = 0; col < NUMBER_MODES; col++)
		{
			sum += princ_comp[row][col] * p_local[col][0];
		}
		shape_3D_d[row][0] = mean_shape[row][0] + sum;
	}


	// Get the rotation matrix
	float euler[3];
	euler[0] = params_global[1];
	euler[1] = params_global[2];
	euler[2] = params_global[3];

	float currRot[3][3];
	Euler2RotationMatrix(euler, currRot);

	float r11 = (float)currRot[0][0];
	float r12 = (float)currRot[0][1];
	float r13 = (float)currRot[0][2];
	float r21 = (float)currRot[1][0];
	float r22 = (float)currRot[1][1];
	float r23 = (float)currRot[1][2];
	// float r31 = (float)currRot[2][0];
	// float r32 = (float)currRot[2][1];
	// float r33 = (float)currRot[2][2];

	// float *Jx = Jacob[0];
	// float *Jy = Jacob[n];

	for (int i = 0; i < n; i++)
	{

		X = shape_3D_d[i][0];
		Y = shape_3D_d[i + n][0];
		Z = shape_3D_d[i + n * 2][0];

		// The rigid jacobian from the axis angle rotation matrix approximation using small angle assumption (R * R')
		// where R' = [1, -wz, wy
		//             wz, 1, -wx
		//             -wy, wx, 1]
		// And this is derived using the small angle assumption on the axis angle rotation matrix parametrisation

		// scaling term
		Jacob_t_w[0][i] = Jacob[i][0] = (X  * r11 + Y * r12 + Z * r13);
		Jacob_t_w[0][i + n] = Jacob[i + n][0] = (X  * r21 + Y * r22 + Z * r23);

		// rotation terms
		Jacob_t_w[1][i] = Jacob[i][1] = (s * (Y * r13 - Z * r12));
		Jacob_t_w[1][i + n] = Jacob[i + n][1] = (s * (Y * r23 - Z * r22));
		Jacob_t_w[2][i] = Jacob[i][2] = (-s * (X * r13 - Z * r11));
		Jacob_t_w[2][i + n] = Jacob[i + n][2] = (-s * (X * r23 - Z * r21));
		Jacob_t_w[3][i] = Jacob[i][3] = (s * (X * r12 - Y * r11));
		Jacob_t_w[3][i + n] = Jacob[i + n][3] = (s * (X * r22 - Y * r21));

		// translation terms
		Jacob_t_w[4][i] = Jacob[i][4] = 1.0f;
		Jacob_t_w[4][i + n] = Jacob[i + n][4] = 0.0f;
		Jacob_t_w[5][i] = Jacob[i][5] = 0.0f;
		Jacob_t_w[5][i + n] = Jacob[i + n][5] = 1.0f;
	}
}

static void ComputeJacobian(const float (*params_local)[1], const float *params_global, float (*Jacobian)[NUM_DIR + NUMBER_MODES], float (*Jacob_t_w)[2 * NUMBER_POINTS])
{
	// number of vertices
	int n = NUMBER_POINTS;

	// number of non-rigid parameters
	int m = NUMBER_MODES;

// 	Jacobian.create(n * 2, 6 + m);
// 	Jacob_t_w.create(6 + m, n * 2);

	float X, Y, Z;

	float s = (float)params_global[0];

	//float shape_3D_d[204][1];
	const float (*p_local_d)[1];
	p_local_d = params_local;
	//shape_3D_d = mean_shape + princ_comp * p_local_d; (204,1) + (204,34)*(34, 1)

	for (int row = 0; row < 204; row++)
	{
		float sum = 0.0f;
		for (int col = 0; col < NUMBER_MODES; col++)
		{
			sum += princ_comp[row][col] * p_local_d[col][0];
		}
		shape_3D_d[row][0] = mean_shape[row][0] + sum;
	}

	float (*shape_3D)[1];
	shape_3D = shape_3D_d;

	float euler[3];
	euler[0] = params_global[1];
	euler[1] = params_global[2];
	euler[2] = params_global[3];

	float currRot[3][3];
	Euler2RotationMatrix(euler,currRot);

	float r11 = (float)currRot[0][0];
	float r12 = (float)currRot[0][1];
	float r13 = (float)currRot[0][2];
	float r21 = (float)currRot[1][0];
	float r22 = (float)currRot[1][1];
	float r23 = (float)currRot[1][2];
	// float r31 = (float)currRot[2][0];
	// float r32 = (float)currRot[2][1];
	// float r33 = (float)currRot[2][2];

	float* Vx = princ_comp[0];
	float* Vy = princ_comp[n];
	float* Vz = princ_comp[n * 2];

	for (int i = 0; i < n; i++)
	{
		X = (float)shape_3D[i][0];
		Y = (float)shape_3D[i + n][0];
		Z = (float)shape_3D[i + n * 2][0];

		// The rigid jacobian from the axis angle rotation matrix approximation using small angle assumption (R * R')
		// where R' = [1, -wz, wy
		//             wz, 1, -wx
		//             -wy, wx, 1]
		// And this is derived using the small angle assumption on the axis angle rotation matrix parametrisation

		// scaling term
		Jacob_t_w[0][i] = Jacobian[i][0] = (X  * r11 + Y * r12 + Z * r13);
		Jacob_t_w[0][i + n] = Jacobian[i + n][0] = (X  * r21 + Y * r22 + Z * r23);

		// rotation terms
		Jacob_t_w[1][i] = Jacobian[i][1] = (s * (Y * r13 - Z * r12));
		Jacob_t_w[1][i + n] = Jacobian[i + n][1] = (s * (Y * r23 - Z * r22));
		Jacob_t_w[2][i] = Jacobian[i][2] = (-s * (X * r13 - Z * r11));
		Jacob_t_w[2][i + n] = Jacobian[i + n][2] = (-s * (X * r23 - Z * r21));
		Jacob_t_w[3][i] = Jacobian[i][3] = (s * (X * r12 - Y * r11));
		Jacob_t_w[3][i + n] = Jacobian[i + n][3] = (s * (X * r22 - Y * r21));

		// translation terms
		Jacob_t_w[4][i] = Jacobian[i][4] = 1.0f;
		Jacob_t_w[4][i + n] = Jacobian[i + n][4] = 0.0f;
		Jacob_t_w[5][i] = Jacobian[i][5] = 0.0f;
		Jacob_t_w[5][i + n] = Jacobian[i + n][5] = 1.0f;

		for (int j = 0; j < m; j++, ++Vx, ++Vy, ++Vz)
		{
			// How much the change of the non-rigid parameters (when object is rotated) affect 2D motion
			Jacob_t_w[6 + j][i] = Jacobian[i][6 + j] = (float)(s*(r11*(*Vx) + r12*(*Vy) + r13*(*Vz)));
			Jacob_t_w[6 + j][i + n] = Jacobian[i + n][6 + j] = (float)(s*(r21*(*Vx) + r22*(*Vy) + r23*(*Vz)));
		}
	}
}

static void Orthonormalise(float(*R)[3])
{
	//	SVD svd(R, SVD::MODIFY_A);
	//Matd<float> svd_w, svd_u, svd_vt;
	float svd_w[3][1];
	static float svd_u[3][3];
	static float svd_vt[3][3];
	_SVDcompute((float *)R, 3, 3, (float *)svd_w, (float *)svd_u, (float *)svd_vt, 1);

	// get the orthogonal matrix from the initial rotation matrix
	static float X[3][3];
	//Matd<float> X = svd_u * svd_vt;
	for (int row = 0; row < 3; row++)
	for (int col = 0; col < 3; col++)
	{
		float sum = 0.0f;
		for (int k = 0; k < 3; k++)
			sum += svd_u[row][k] * svd_vt[k][col];
		X[row][col] = sum;
	}

	// This makes sure that the handedness is preserved and no reflection happened
	// by making sure the determinant is 1 and not -1
	float W[3][3] = { { 1, 0, 0 }, { 0, 1, 0 }, { 0, 0, 1 } };

	W[2][2] = determinant((float *)X, 3);

	//R = svd_u*W*svd_vt;
	for (int row = 0; row < 3; row++)
	for (int col = 0; col < 3; col++)
	{
		float sum = 0.0f;
		for (int k = 0; k < 3; k++)
			sum += svd_u[row][k] * W[k][col];
		X[row][col] = sum;
	}
	for (int row = 0; row < 3; row++)
	for (int col = 0; col < 3; col++)
	{
		float sum = 0.0f;
		for (int k = 0; k < 3; k++)
			sum += X[row][k] * svd_vt[k][col];
		R[row][col] = sum;
	}
}

static void RotationMatrix2AxisAngle(const float(*rotation_matrix)[3], float *axis_angle)
{
	float angle_mat[3][1]; // shape of rotation_matrix = (3,3)
	Rodrigues((float *)rotation_matrix, 3, 3, (float *)angle_mat);
	axis_angle[0] = angle_mat[0][0];
	axis_angle[1] = angle_mat[1][0];
	axis_angle[2] = angle_mat[2][0];
	return;
}

static void RotationMatrix2Euler(const float(*rotation_matrix)[3], float * ret)
{
	float q0 = sqrt(1 + rotation_matrix[0][0] + rotation_matrix[1][1] + rotation_matrix[2][2]) / 2.0f;
	float q1 = (rotation_matrix[2][1] - rotation_matrix[1][2]) / (4.0f*q0);
	float q2 = (rotation_matrix[0][2] - rotation_matrix[2][0]) / (4.0f*q0);
	float q3 = (rotation_matrix[1][0] - rotation_matrix[0][1]) / (4.0f*q0);

	// float t1 = 2.0f * (q0*q2 + q1*q3);

	float yaw = asin(2.0f * (q0*q2 + q1*q3));
	float pitch = atan2(2.0f * (q0*q1 - q2*q3), q0*q0 - q1*q1 - q2*q2 + q3*q3);
	float roll = atan2(2.0f * (q0*q3 - q1*q2), q0*q0 + q1*q1 - q2*q2 - q3*q3);

	ret[0] = pitch;
	ret[1] = yaw;
	ret[2] = roll;
}

static void AxisAngle2Euler(const float *axis_angle, float *vecRet)
{
	float rotation_matrix[3][3];
	float angle_mat[3][1];
	angle_mat[0][0] = axis_angle[0];
	angle_mat[1][0] = axis_angle[1];
	angle_mat[2][0] = axis_angle[2];
	Rodrigues((float *)angle_mat, 3, 1, (float *)rotation_matrix);
	RotationMatrix2Euler(rotation_matrix, vecRet);
	return;
}

static void UpdateModelParameters(const float (*delta_p)[1], int rows, float (*params_local)[1], float *params_global)
{
	// The scaling and translation parameters can be just added
	params_global[0] += (float)delta_p[0][0];
	params_global[4] += (float)delta_p[4][0];
	params_global[5] += (float)delta_p[5][0];

	// get the original rotation matrix	
	float eulerGlobal[3];
	eulerGlobal[0] = params_global[1];
	eulerGlobal[1] = params_global[2];
	eulerGlobal[2] = params_global[3];
	float R1[3][3];
	Euler2RotationMatrix(eulerGlobal,R1);

	// construct R' = [1, -wz, wy
	//               wz, 1, -wx
	//               -wy, wx, 1]
	float R2[3][3];
	R2[0][0] = R2[1][1] = R2[2][2] = 1.0;

	R2[1][2] = -1.0f * (R2[2][1] = delta_p[1][0]);
	R2[2][0] = -1.0f * (R2[0][2] = delta_p[2][0]);
	R2[0][1] = -1.0f * (R2[1][0] = delta_p[3][0]);

	// Make sure it's orthonormal
	Orthonormalise(R2);

	// Combine rotations
	float R3[3][3];
	//R3 = R1 *R2;
	for (int row = 0; row < 3; row++)
	{
		for (int col = 0; col < 3; col++)
		{
			float sum = 0.0f;
			for (int k = 0; k < 3; k++)
				sum += R1[row][k] * R2[k][col];
			R3[row][col] = sum;
		}
	}
	// Extract euler angle (through axis angle first to make sure it's legal)
	float axis_angle[3], euler[3];
	RotationMatrix2AxisAngle(R3, axis_angle);
	AxisAngle2Euler(axis_angle, euler);

	params_global[1] = euler[0];
	params_global[2] = euler[1];
	params_global[3] = euler[2];

	// Local parameter update, just simple addition
	for (int i = 0; i < rows - 6; i++)
	{
		params_local[i][0] += delta_p[6 + i][0];
	}
}

static void Clamp(float *local_params, float *params_global)
{
	float n_sigmas = 3;
	float* e_it = eigen_values[0];
	float* p_it = local_params;

	float v;
	int m = NUMBER_MODES;

	// go over all parameters
	for (int i = 0; i < m; i++, ++p_it, ++e_it)
	{
		// Work out the maximum value
		v = n_sigmas*sqrt(*e_it);

		// if the values is too extreme clamp it
		if (fabs(*p_it) > v)
		{
			// Dealing with positive and negative cases
			if (*p_it > 0.0)
			{
				*p_it = (float)v;
			}
			else
			{
				*p_it = -(float)v;
			}
		}
	}

	if (params_global[1] > M_PI / 2) params_global[1] = M_PI / 2;
	if (params_global[1] < -M_PI / 2) params_global[1] = -M_PI / 2;
	if (params_global[2] > M_PI / 2) params_global[2] = M_PI / 2;
	if (params_global[2] < -M_PI / 2) params_global[2] = -M_PI / 2;
	if (params_global[3] > M_PI / 2) params_global[3] = M_PI / 2;
	if (params_global[3] < -M_PI / 2) params_global[3] = -M_PI / 2;
}

static void LandmarkToFaceGraph(float(*landmarks)[1], MODEL2Df* pxFaceGraph)
{
	pxFaceGraph->nNodeNum = 78;
	for (int i = 0; i < 68; i++)
	{
		pxFaceGraph->pxNodes[i].rX = (float)landmarks[i][0];
		pxFaceGraph->pxNodes[i].rY = (float)landmarks[i + 68][0];
	}

	/// Left iris
	pxFaceGraph->pxNodes[68].rX = (pxFaceGraph->pxNodes[37].rX + pxFaceGraph->pxNodes[38].rX + pxFaceGraph->pxNodes[40].rX + pxFaceGraph->pxNodes[41].rX) / 4;
	pxFaceGraph->pxNodes[68].rY = (pxFaceGraph->pxNodes[37].rY + pxFaceGraph->pxNodes[38].rY + pxFaceGraph->pxNodes[40].rY + pxFaceGraph->pxNodes[41].rY) / 4;

	/// Right iris
	pxFaceGraph->pxNodes[69].rX = (pxFaceGraph->pxNodes[43].rX + pxFaceGraph->pxNodes[44].rX + pxFaceGraph->pxNodes[46].rX + pxFaceGraph->pxNodes[47].rX) / 4;
	pxFaceGraph->pxNodes[69].rY = (pxFaceGraph->pxNodes[43].rY + pxFaceGraph->pxNodes[44].rY + pxFaceGraph->pxNodes[46].rY + pxFaceGraph->pxNodes[47].rY) / 4;

	/// center of Mouth
	pxFaceGraph->pxNodes[70].rX = (pxFaceGraph->pxNodes[62].rX + pxFaceGraph->pxNodes[66].rX) / 2;
	pxFaceGraph->pxNodes[70].rY = (pxFaceGraph->pxNodes[62].rY + pxFaceGraph->pxNodes[66].rY) / 2;

	/// left ear
	pxFaceGraph->pxNodes[71].rX = (pxFaceGraph->pxNodes[1].rX + pxFaceGraph->pxNodes[2].rX) / 2;
	pxFaceGraph->pxNodes[71].rY = (pxFaceGraph->pxNodes[1].rY + pxFaceGraph->pxNodes[2].rY) / 2;

	/// right ear
	pxFaceGraph->pxNodes[72].rX = (pxFaceGraph->pxNodes[14].rX + pxFaceGraph->pxNodes[15].rX) / 2;
	pxFaceGraph->pxNodes[72].rY = (pxFaceGraph->pxNodes[14].rY + pxFaceGraph->pxNodes[15].rY) / 2;

	/// left eye down
	pxFaceGraph->pxNodes[73].rX = (pxFaceGraph->pxNodes[40].rX * 4 + pxFaceGraph->pxNodes[41].rX * 4 - pxFaceGraph->pxNodes[36].rX - pxFaceGraph->pxNodes[39].rX) / 6;
	pxFaceGraph->pxNodes[73].rY = (pxFaceGraph->pxNodes[40].rY * 4 + pxFaceGraph->pxNodes[41].rY * 4 - pxFaceGraph->pxNodes[36].rY - pxFaceGraph->pxNodes[39].rY) / 6;

	/// righy eye down
	pxFaceGraph->pxNodes[74].rX = (pxFaceGraph->pxNodes[47].rX * 4 + pxFaceGraph->pxNodes[46].rX * 4 - pxFaceGraph->pxNodes[42].rX - pxFaceGraph->pxNodes[45].rX) / 6;
	pxFaceGraph->pxNodes[74].rY = (pxFaceGraph->pxNodes[47].rY * 4 + pxFaceGraph->pxNodes[46].rY * 4 - pxFaceGraph->pxNodes[42].rY - pxFaceGraph->pxNodes[45].rY) / 6;

	/// nose up
	pxFaceGraph->pxNodes[75].rX = (pxFaceGraph->pxNodes[28].rX + pxFaceGraph->pxNodes[29].rX) / 2;
	pxFaceGraph->pxNodes[75].rY = (pxFaceGraph->pxNodes[28].rY + pxFaceGraph->pxNodes[29].rY) / 2;

	/// left side
	pxFaceGraph->pxNodes[76].rX = (pxFaceGraph->pxNodes[3].rX + pxFaceGraph->pxNodes[4].rX) / 2;
	pxFaceGraph->pxNodes[76].rY = (pxFaceGraph->pxNodes[3].rY + pxFaceGraph->pxNodes[4].rY) / 2;

	/// right side
	pxFaceGraph->pxNodes[77].rX = (pxFaceGraph->pxNodes[12].rX + pxFaceGraph->pxNodes[13].rX) / 2;
	pxFaceGraph->pxNodes[77].rY = (pxFaceGraph->pxNodes[12].rY + pxFaceGraph->pxNodes[13].rY) / 2;
}

static void Rigid_RLMS_ARM(float *param_global, float(*param_local)[1], MODEL2Df* pxFaceDestGraph, int* pnInIndex, bool rigid)
{
	static int inv_idx[] = { 36, 45, 62, 2, 14, 41, 46, 29, 4, 12 };

	int n = NUMBER_POINTS;
	int m = NUMBER_MODES;

	float * current_global = param_global;

	float(*current_local)[1];
	static float current_shape[2 * NUMBER_POINTS][1];
	static float previous_shape[2 * NUMBER_POINTS][1];
	static float J[2 * NUMBER_POINTS][NUM_DIR + NUMBER_MODES];
	static float J_w_t[NUM_DIR + NUMBER_MODES][2 * NUMBER_POINTS];
	//Matd<float> mean_shifts(2 * n, 1);
	//Matd<float> regTerm(6 + m, 6 + m);
	static float mean_shifts[2 * NUMBER_POINTS][1];
	static float regTerm[NUM_DIR + NUMBER_MODES][NUM_DIR + NUMBER_MODES];
	static MODEL2Df xFaceTmpGraph;
	MODEL2Df *pxFaceTmpGraph = &xFaceTmpGraph;

	static int used_idx[68];

	current_local = param_local; // (number_modes, 1)

	if (!rigid)
	{
		for (int i = 0; i < m; i++)
		{
			regTerm[6 + i][6 + i] = 25.0f / eigen_values[0][i];
		}
	}

	int iter = 0;
	for (iter = 0; iter < 3; iter++)
	{
		CalcShape2D(current_shape, current_local, current_global);
		LandmarkToFaceGraph(current_shape, pxFaceTmpGraph);

		if (iter > 0)
		{
			float dNorm = 0.0, delta;
			for (int i = 0; i < 2 * NUMBER_POINTS; i++)
			{
				delta = current_shape[i][0] - previous_shape[i][0];
				dNorm += (delta * delta);
			}
			dNorm = sqrt(dNorm);
			if (dNorm < 0.01) break;
		}

		//previous_shape = current_shape;
		memcpy(previous_shape, current_shape, sizeof(current_shape));

		if (rigid) ComputeRigidJacobian(current_local, current_global, J, J_w_t);
		else ComputeJacobian(current_local, current_global, J, J_w_t);

		memset(used_idx, 0, 68 * 4);
		for (int i = 0; i < pxFaceDestGraph->nNodeNum; i++) {
			//if (!pbNodeStatusArray[i]) continue;

			float dx, dy;
			int idx = pnInIndex[i];

			dx = pxFaceDestGraph->pxNodes[i].rX - pxFaceTmpGraph->pxNodes[idx].rX;
			dy = pxFaceDestGraph->pxNodes[i].rY - pxFaceTmpGraph->pxNodes[idx].rY;

			if (idx >= 68) idx = inv_idx[idx - 68];
			mean_shifts[idx][0] = dx;
			mean_shifts[idx + 68][0] = dy;

			used_idx[idx] = 1;
		}
		int size = rigid ? NUM_DIR : (NUM_DIR + NUMBER_MODES);
		// remove non-visible observations
		for (int i = 0; i < n; ++i) {
			if (used_idx[i]) continue;
			for (int j = 0; j < size; j++)
			{
				J[i][j] = 0.0f;
				J[i + n][j] = 0.0f;
			}
			mean_shifts[i][0] = 0.0f;
			mean_shifts[i + n][0] = 0.0f;
		}

		//Matd<float> J_w_t_m = J_w_t * mean_shifts;
		static float J_w_t_m[NUM_DIR + NUMBER_MODES][1];
		static float Hessian_buffer[(NUM_DIR + NUMBER_MODES)*(NUM_DIR + NUMBER_MODES)];
		static float param_update[NUM_DIR + NUMBER_MODES][1];

		if (rigid)
		{
			//J_w_t_m = J_w_t * mean_shifts;
			for (int i = 0; i < NUM_DIR; i++)
			{
				float s = 0.0f;
				for (int k = 0; k < 2 * NUMBER_POINTS; k++)
					s += J_w_t[i][k] * mean_shifts[k][0];
				J_w_t_m[i][0] = s;
			}

			//Matd<float> Hessian = J_w_t * J;
			float(*Hessian)[NUM_DIR] = (float(*)[NUM_DIR])Hessian_buffer;
			for (int r = 0; r < NUM_DIR; r++)
			{
				for (int c = 0; c < NUM_DIR; c++)
				{
					float s = 0.0f;
					for (int k = 0; k < 2 * NUMBER_POINTS; k++)
						s += J_w_t[r][k] * J[k][c];
					Hessian[r][c] = s;
				}
			}
			solve_CHOLESKY((float*)Hessian, NUM_DIR, NUM_DIR, (float *)J_w_t_m, 1, (float *)param_update);
		}
		else // if rigid == false
		{
			for (int i = 0; i < NUM_DIR + NUMBER_MODES; i++)
			{
				float s = 0.0f;
				for (int k = 0; k < 2 * NUMBER_POINTS; k++)
					s += J_w_t[i][k] * mean_shifts[k][0];
				J_w_t_m[i][0] = s;
			}

			//Matd<float> Hessian = J_w_t * J;
			float(*Hessian)[NUM_DIR + NUMBER_MODES] = (float(*)[NUM_DIR + NUMBER_MODES])Hessian_buffer;
			for (int r = 0; r < NUM_DIR + NUMBER_MODES; r++)
			{
				for (int c = 0; c < NUM_DIR + NUMBER_MODES; c++)
				{
					float s = 0.0f;
					for (int k = 0; k < 2 * NUMBER_POINTS; k++)
						s += J_w_t[r][k] * J[k][c];
					Hessian[r][c] = s;
				}
			}

			for (int i = 0; i < NUMBER_MODES; i++)
			{
				float p = 0;
				for (int j = 0; j < NUMBER_MODES; j++)
				{
					p += regTerm[6 + i][6 + j] * current_local[j][0];
				}

				J_w_t_m[6 + i][0] = J_w_t_m[6 + i][0] - p;
			}
			//Hessian = Hessian + regTerm;

			for (int i = 0; i < NUM_DIR + NUMBER_MODES; i++)
			{
				for (int j = 0; j < NUM_DIR + NUMBER_MODES; j++)
					Hessian[i][j] += regTerm[i][j];
			}
			solve_CHOLESKY((float*)Hessian, NUM_DIR + NUMBER_MODES, NUM_DIR + NUMBER_MODES, (float *)J_w_t_m, 1, (float *)param_update);
		}

		// update the reference
		UpdateModelParameters(param_update, size, current_local, current_global);

		// clamp to the local parameters for valid expressions
		Clamp((float *)current_local, current_global);
	} // end of for statement

	// 	param_global = current_global;
	// 	param_local = current_local;
}

void getPose(float rFaceLeft, float rFaceTop, float rFaceRate, float rFacePan, float *pModelPoints, int nModelPointNum, float &rRotateX, float &rRotateY, float &rRotateZ)
{
	static MODEL2Df xModelInfo;
	xModelInfo.nNodeNum = nModelPointNum;
	// 	mean_shape = (float(*)[1])mean_shape_mat_;// .create(204, 1, mean_shape_mat_);
	// 	princ_comp = (float(*)[NUMBER_MODES]) princ_comp_mat_;// .create(204, 34, princ_comp_mat_);
	// 	eigen_values = (float(*)[NUMBER_MODES]) eigen_values_mat_;// .create(1, 34, eigen_values_mat_);


	int i;
	for (i = 0; i < nModelPointNum; i++)
	{
		xModelInfo.pxNodes[i].rX = pModelPoints[i * 2];
		xModelInfo.pxNodes[i].rY = pModelPoints[i * 2 + 1];
	}

	/// Init Gloabl and Loal Information

	//Vecd<float> param_global(6);
	float param_global[6];
	param_global[0] = 0.16722992f * rFaceRate;
	param_global[4] = rFaceRate * 13.933334f + rFaceLeft;
	param_global[5] = rFaceRate * 17.327505f + rFaceTop;
	param_global[1] = 0;
	param_global[2] = -rFacePan* 3.1415926535f / 180.0f;
	param_global[3] = 0;

	//	Matd<float> param_local(NUMBER_MODES, 1); // 34 = g_pPdm->NUMBER_MODES
	static float param_local[NUMBER_MODES][1];
	memset(param_local, 0, sizeof (float)* NUMBER_MODES);
	int* pIndex;

	static int p251[] = { 68, 69, 17, 21, 22, 26, 27, 30, 51, 57, 48, 54, 31, 35, 70, 33, 39, 73, 36, 45, 74, 42, 19, 24, 8 };
	static int p252[] = { 69, 68, 26, 22, 21, 17, 27, 30, 51, 57, 54, 48, 35, 31, 70, 33, 42, 74, 45, 36, 73, 39, 24, 19, 8 };

	static int p271[] = { 68, 69, 17, 21, 22, 26, 27, 30, 51, 57, 48, 54, 31, 35, 70, 33, 39, 73, 36, 45, 74, 42, 71, 19, 24, 8, 76 };
	static int p272[] = { 69, 68, 26, 22, 21, 17, 27, 30, 51, 57, 54, 48, 35, 31, 70, 33, 42, 74, 45, 36, 73, 39, 72, 24, 19, 8, 77 };

	if (xModelInfo.nNodeNum == 27)
	{
		if (xModelInfo.pxNodes[0].rX < xModelInfo.pxNodes[1].rX) pIndex = p271;
		else pIndex = p272;
	}
	else {
		if (xModelInfo.pxNodes[0].rX < xModelInfo.pxNodes[1].rX) pIndex = p251;
		else pIndex = p252;
	}

	Rigid_RLMS_ARM(param_global, param_local, &xModelInfo, pIndex, true);
	Rigid_RLMS_ARM(param_global, param_local, &xModelInfo, pIndex, false);

	rRotateX = (float)(param_global[1] * 180 / M_PI);
	rRotateY = (float)(param_global[2] * 180 / M_PI);
	rRotateZ = (float)(param_global[3] * 180 / M_PI);
}

static void Rigid_RLMS_DLIB(float *param_global, float(*param_local)[1], MODEL2Df* pxFaceDestGraph, bool rigid)
{
	int n = NUMBER_POINTS;
	int m = NUMBER_MODES;

	float * current_global = param_global;

	float(*current_local)[1];
	static float current_shape[2 * NUMBER_POINTS][1];
	static float previous_shape[2 * NUMBER_POINTS][1];
	static float J[2 * NUMBER_POINTS][NUM_DIR + NUMBER_MODES];
	static float J_w_t[NUM_DIR + NUMBER_MODES][2 * NUMBER_POINTS];
	//Matd<float> mean_shifts(2 * n, 1);
	//Matd<float> regTerm(6 + m, 6 + m);
	static float mean_shifts[2 * NUMBER_POINTS][1];
	static float regTerm[NUM_DIR + NUMBER_MODES][NUM_DIR + NUMBER_MODES];

	current_local = param_local; // (number_modes, 1)

	if (!rigid)
	{
		for (int i = 0; i < m; i++)
		{
			regTerm[6 + i][6 + i] = 25.0f / eigen_values[0][i];
		}
	}

	int iter = 0;
	for (iter = 0; iter < 3; iter++)
	{
		CalcShape2D(current_shape, current_local, current_global);

		if (iter > 0)
		{
			float dNorm = 0.0, delta;
			for (int i = 0; i < 2 * NUMBER_POINTS; i++)
			{
				delta = current_shape[i][0] - previous_shape[i][0];
				dNorm += (delta * delta);
			}
			dNorm = sqrt(dNorm);
			if (dNorm < 0.01) break;
		}

		//previous_shape = current_shape;
		memcpy(previous_shape, current_shape, sizeof(current_shape));

		if (rigid) ComputeRigidJacobian(current_local, current_global, J, J_w_t);
		else ComputeJacobian(current_local, current_global, J, J_w_t);

		for (int i = 0; i < pxFaceDestGraph->nNodeNum; i++) {
			mean_shifts[i][0] = pxFaceDestGraph->pxNodes[i].rX - current_shape[i][0];
			mean_shifts[i + 68][0] = pxFaceDestGraph->pxNodes[i].rY - current_shape[i + n][0];
		}
		int size = rigid ? NUM_DIR : (NUM_DIR + NUMBER_MODES);

		//Matd<float> J_w_t_m = J_w_t * mean_shifts;
		static float J_w_t_m[NUM_DIR + NUMBER_MODES][1];
		static float Hessian_buffer[(NUM_DIR + NUMBER_MODES)*(NUM_DIR + NUMBER_MODES)];
		static float param_update[NUM_DIR + NUMBER_MODES][1];

		if (rigid)
		{
			//J_w_t_m = J_w_t * mean_shifts;
			for (int i = 0; i < NUM_DIR; i++)
			{
				float s = 0.0f;
				for (int k = 0; k < 2 * NUMBER_POINTS; k++)
					s += J_w_t[i][k] * mean_shifts[k][0];
				J_w_t_m[i][0] = s;
			}

			//Matd<float> Hessian = J_w_t * J;
			float(*Hessian)[NUM_DIR] = (float(*)[NUM_DIR])Hessian_buffer;
			for (int r = 0; r < NUM_DIR; r++)
			{
				for (int c = 0; c < NUM_DIR; c++)
				{
					float s = 0.0f;
					for (int k = 0; k < 2 * NUMBER_POINTS; k++)
						s += J_w_t[r][k] * J[k][c];
					Hessian[r][c] = s;
				}
			}
			solve_CHOLESKY((float*)Hessian, NUM_DIR, NUM_DIR, (float *)J_w_t_m, 1, (float *)param_update);
		}
		else // if rigid == false
		{
			for (int i = 0; i < NUM_DIR + NUMBER_MODES; i++)
			{
				float s = 0.0f;
				for (int k = 0; k < 2 * NUMBER_POINTS; k++)
					s += J_w_t[i][k] * mean_shifts[k][0];
				J_w_t_m[i][0] = s;
			}

			//Matd<float> Hessian = J_w_t * J;
			float(*Hessian)[NUM_DIR + NUMBER_MODES] = (float(*)[NUM_DIR + NUMBER_MODES])Hessian_buffer;
			for (int r = 0; r < NUM_DIR + NUMBER_MODES; r++)
			{
				for (int c = 0; c < NUM_DIR + NUMBER_MODES; c++)
				{
					float s = 0.0f;
					for (int k = 0; k < 2 * NUMBER_POINTS; k++)
						s += J_w_t[r][k] * J[k][c];
					Hessian[r][c] = s;
				}
			}

			for (int i = 0; i < NUMBER_MODES; i++)
			{
				float p = 0;
				for (int j = 0; j < NUMBER_MODES; j++)
				{
					p += regTerm[6 + i][6 + j] * current_local[j][0];
				}

				J_w_t_m[6 + i][0] = J_w_t_m[6 + i][0] - p;
			}
			//Hessian = Hessian + regTerm;

			for (int i = 0; i < NUM_DIR + NUMBER_MODES; i++)
			{
				for (int j = 0; j < NUM_DIR + NUMBER_MODES; j++)
					Hessian[i][j] += regTerm[i][j];
			}
			solve_CHOLESKY((float*)Hessian, NUM_DIR + NUMBER_MODES, NUM_DIR + NUMBER_MODES, (float *)J_w_t_m, 1, (float *)param_update);
		}

		// update the reference
		UpdateModelParameters(param_update, size, current_local, current_global);

		// clamp to the local parameters for valid expressions
		Clamp((float *)current_local, current_global);
	} // end of for statement

	// 	param_global = current_global;
	// 	param_local = current_local;
}

void getPose68(float rFaceLeft, float rFaceTop, float rFaceSize, float *pModelPoints, int nModelPointNum, float &rRotateX, float &rRotateY, float &rRotateZ)
{
	static MODEL2Df xModelInfo;
	xModelInfo.nNodeNum = nModelPointNum;
	// 	mean_shape = (float(*)[1])mean_shape_mat_;// .create(204, 1, mean_shape_mat_);
	// 	princ_comp = (float(*)[NUMBER_MODES]) princ_comp_mat_;// .create(204, 34, princ_comp_mat_);
	// 	eigen_values = (float(*)[NUMBER_MODES]) eigen_values_mat_;// .create(1, 34, eigen_values_mat_);


	int i;
	for (i = 0; i < nModelPointNum; i++)
	{
		xModelInfo.pxNodes[i].rX = pModelPoints[i * 2];
		xModelInfo.pxNodes[i].rY = pModelPoints[i * 2 + 1];
	}

	/// Init Gloabl and Loal Information

	//Vecd<float> param_global(6);
	float param_global[6];
	param_global[0] = rFaceSize * 0.0063792713825664954387977987822f;
	param_global[4] = rFaceLeft + rFaceSize * 0.5f;
	param_global[5] = rFaceTop + rFaceSize * (0.53638665963749943733601682727703f);
	param_global[1] = 0;
	param_global[2] = 0;
	param_global[3] = 0;

	//	Matd<float> param_local(NUMBER_MODES, 1); // 34 = g_pPdm->NUMBER_MODES
	static float param_local[NUMBER_MODES][1];
	memset(param_local, 0, sizeof (float)* NUMBER_MODES);

	Rigid_RLMS_DLIB(param_global, param_local, &xModelInfo, true);
	Rigid_RLMS_DLIB(param_global, param_local, &xModelInfo, false);

	rRotateX = (float)(param_global[1] * 180 / M_PI);
	rRotateY = (float)(param_global[2] * 180 / M_PI);
	rRotateZ = (float)(param_global[3] * 180 / M_PI);
}
