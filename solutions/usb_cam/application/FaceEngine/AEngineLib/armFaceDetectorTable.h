#ifndef _ARMFACEDETECTORTABLE_H
#define _ARMFACEDETECTORTABLE_H

typedef struct _tagDETECTOR_FeaturePatternTable{
	int	nStageNum[18];
	int	nTotalPatternNum[18];
	int	nFilterNum[18];
	int	nStructSize[18];
	float	rMul[18];
	unsigned short	pwStagePatternNum[123];
	float	prUnk1[123];
	float	prRejectActivityThresholdArray[123];
} DETECTOR_FeaturePatternTable;

float grRate_Mul_PatchSize[] = 
{
	35.000000000f, 41.622354507f, 49.497721672f, 58.863189697f, 70.000700951f, 83.245543480f, 98.996438026f,
		117.727567673f, 140.002910614f, 166.492755890f, 197.994865417f, 235.457485199f, 280.008438110f, 
		332.988849640f, 395.993709564f, 470.919723511f, 560.022483826f, 665.984428406f
};

//static DETECTOR_FeaturePatternTable gxDetector_FeaturePatternTable = { 0 };
static const DETECTOR_FeaturePatternTable gxDetector_FeaturePatternTable = 
{
	/* FeaturePattern : nStageNum */
	{
		10, 3, 2, 10, 3, 2, 10, 3, 2, 16, 6, 4, 16, 6, 4, 16, 6, 4
	},
	/* FeaturePattern : nTotalPatternNum */
	{
		400, 200, 100, 400, 200, 100, 400, 200, 100, 799, 300, 251, 799, 300, 251, 799, 300, 251
	},
	/* FeaturePattern : nFilterNum */
	{
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
	},
	/* FeaturePattern : nStructSize */
	{
		32, 76, 52, 32, 76, 52, 32, 76, 52, 32, 76, 52, 32, 76, 52, 32, 76, 52
	},
	/* FeaturePattern : rMul */
	{
		0.001275510f, 0.001275510f, 0.001275510f, 0.001275510f, 0.001275510f, 0.001275510f, 0.001275510f, 0.001275510f, 0.001275510f, 0.001275510f, 0.001275510f, 0.001275510f, 0.001275510f, 0.001275510f, 0.001275510f, 0.001275510f, 0.001275510f, 0.001275510f
	},
	/* FeaturePattern : pwStagePatternNum */
	{
		2, 4, 6, 9, 14, 23, 37, 59, 95, 151, 40, 62, 98, 40, 60, 2, 4, 6, 9, 14, 23, 37, 59, 95, 151, 40, 62, 98, 40, 60, 2, 4, 6, 9, 14, 23, 37, 59, 95, 151, 40, 62, 98, 40, 60, 4, 5, 7, 9, 12, 15, 19, 25, 31, 40, 52, 66, 85, 109, 140, 180, 20, 27, 37, 51, 70, 95, 25, 42, 69, 115, 4, 5, 7, 9, 12, 15, 19, 25, 31, 40, 52, 66, 85, 109, 140, 180, 20, 27, 37, 51, 70, 95, 25, 42, 69, 115, 4, 5, 7, 9, 12, 15, 19, 25, 31, 40, 52, 66, 85, 109, 140, 180, 20, 27, 37, 51, 70, 95, 25, 42, 69, 115
	},
	
	/* FeaturePattern : prUnk1 */
	{
		0.000000000f, 0.000000000f, 0.000000000f, 0.000000000f, 0.000000000f, 0.000000000f, 0.000000000f, 
		0.000000000f, 0.000000000f, 0.000000000f, 0.000000000f, 0.000000000f, 0.000000000f, 
		340282001837565600000000000000000000000.000000000f, 340282001837565600000000000000000000000.000000000f,
		0.000000000f, 0.000000000f, 0.000000000f, 0.000000000f, 0.000000000f, 0.000000000f, 0.000000000f, 
		0.000000000f, 0.000000000f, 0.000000000f, 0.000000000f, 0.000000000f, 0.000000000f, 
		340282001837565600000000000000000000000.000000000f, 340282001837565600000000000000000000000.000000000f,
		0.000000000f, 0.000000000f, 0.000000000f, 0.000000000f, 0.000000000f, 0.000000000f, 0.000000000f, 
		0.000000000f, 0.000000000f, 0.000000000f, 0.000000000f, 0.000000000f, 0.000000000f, 
		340282001837565600000000000000000000000.000000000f, 340282001837565600000000000000000000000.000000000f,
		0.000000000f, 0.000000000f, 0.000000000f, 0.000000000f, 0.000000000f, 0.000000000f, 0.000000000f, 
		0.000000000f, 0.000000000f, 0.000000000f, 0.000000000f, 0.000000000f, 0.000000000f, 0.000000000f, 
		0.000000000f, 0.000000000f, 0.000000000f, 0.000000000f, 0.000000000f, 0.000000000f, 0.000000000f, 
		0.000000000f, 20.838899612f, 15.563500404f, 12.529800415f, 10.827599525f, 0.000000000f, 0.000000000f, 
		0.000000000f, 0.000000000f, 0.000000000f, 0.000000000f, 0.000000000f, 0.000000000f, 0.000000000f, 
		0.000000000f, 0.000000000f, 0.000000000f, 0.000000000f, 0.000000000f, 0.000000000f, 0.000000000f, 
		0.000000000f, 0.000000000f, 0.000000000f, 0.000000000f, 0.000000000f, 0.000000000f, 17.544399261f, 
		13.662599564f, 11.678199768f, 10.800299644f, 0.000000000f, 0.000000000f, 0.000000000f, 0.000000000f, 
		0.000000000f, 0.000000000f, 0.000000000f, 0.000000000f, 0.000000000f, 0.000000000f, 0.000000000f, 
		0.000000000f, 0.000000000f, 0.000000000f, 0.000000000f, 0.000000000f, 0.000000000f, 0.000000000f, 
		0.000000000f, 0.000000000f, 0.000000000f, 0.000000000f, 17.544399261f, 13.662599564f, 11.678199768f, 
		10.800299644f
	},
	/* FeaturePattern : prRejectActivityThresholdArray */
	{
		-0.742187977f, -0.773437977f, -0.761718988f, -0.607421994f, -0.380858988f, -0.177734002f, 0.014648400f, 0.215820000f, 0.416992009f, 0.535645008f, 
		1.341310024f, 2.016109943f, 2.549319983f, 
		3.182130098f, 3.765140057f, 
		-0.804687977f, -0.894531012f, -0.730468988f, -0.525390983f, -0.228515998f, 0.099609397f, 0.434570014f, 0.737304986f, 1.049319983f, 1.297359943f, 
		2.113770008f, 2.843260050f, 3.437010050f, 
		4.000490189f, 4.589360237f, 
		-0.804687977f, -0.894531012f, -0.730468988f, -0.525390983f, -0.228515998f, 0.099609397f, 0.434570014f, 0.737304986f, 1.049319983f, 1.297359943f, 
		2.113770008f, 2.843260050f, 3.437010050f, 
		4.000490189f, 4.589360237f, 
		-2.132810116f, -1.933590055f, -1.652340055f, -1.308590055f, -0.958984017f, -0.662109017f, -0.310546994f, 0.028320299f, 0.383789003f, 0.719726980f, 1.010740042f, 1.278319955f, 1.504879951f, 1.692379951f, 1.815430045f, 1.823240042f, 
		2.663089991f, 3.334959984f, 3.940429926f, 4.463870049f, 4.930659771f, 5.307620049f, 
		6.096680164f, 6.844729900f, 7.544429779f, 8.159669876f, 
		-1.789059997f, -1.527340055f, -1.269530058f, -0.912109017f, -0.537109017f, -0.095703103f, 0.340820014f, 0.747070014f, 1.200199962f, 1.594730020f, 1.973629951f, 2.374020100f, 2.711430073f, 3.025880098f, 3.292479992f, 3.568850040f, 
		4.361820221f, 5.020020008f, 5.583499908f, 6.116700172f, 6.599120140f, 7.030759811f, 
		7.710450172f, 8.347169876f, 8.955570221f, 9.417480469f, 
		-1.789059997f, -1.527340055f, -1.269530058f, -0.912109017f, -0.537109017f, -0.095703103f, 0.340820014f, 0.747070014f, 1.200199962f, 1.594730020f, 1.973629951f, 2.374020100f, 2.711430073f, 3.025880098f, 3.292479992f, 3.568850040f, 
		4.361820221f, 5.020020008f, 5.583499908f, 6.116700172f, 6.599120140f, 7.030759811f, 
		7.710450172f, 8.347169876f, 8.955570221f, 9.417480469f
	}
};


typedef struct _tagWAVEPATTERN_PROPERTY_TABLE{
	float	rTilt[6];
	float	rPan[6];
	float	rRoll[6];
	float	rTiltDev[6];
	float	rPanDev[6];
	float	rRollDev[6];
	float	rTransDev[6];
	float	rScaleDev[6];
}WAVEPATTERN_PROPERTY_TABLE;

static const WAVEPATTERN_PROPERTY_TABLE gxWavePatternPropertyTable = 
{
	{
		0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f
	},
	{
		0.000000f, 35.000000f, -35.000000f, 0.000000f, 35.000000f, -35.000000f
	},
	{
		0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f
	},
	{
		30.000000f, 30.000000f, 30.000000f, 30.000000f, 30.000000f, 30.000000f
	},
	{
		35.000000f, 35.000000f, 35.000000f, 35.000000f, 35.000000f, 35.000000f
	},
	{
		15.000000f, 15.000000f, 15.000000f, 11.250000f, 11.250000f, 11.250000f
	},
	{
		2.51000f, 2.51000f, 2.51000f, 0.990000f, 0.990000f, 0.990000f
	},
	{
		-1.000000f, -1.000000f, -1.000000f, -1.000000f, -1.000000f, -1.000000f
	}	
};
/*
float ganRate[]=
{
	1.25f, 1.486512625f, 1.767775825f, 2.1022568625f, 2.5000251f, 2.9730551f, 3.53558715f, 4.20455595f, 
	5.0001040375f, 5.9461699012f, 7.07124530287f, 8.40919633375f, 10.0003012129797f, 11.892452239990f, 
	14.1426326010f, 16.8185615297456f, 20.0008032386f, 23.785140991211f, 28.285528182983f
};

float grLogRate[] = 
{
	0.223143551f, 0.396432881f, 0.569722132f, 0.743011422f, 0.916300745f, 1.089590085f, 1.262879360f,
	1.436168696f, 1.609458702f, 1.782747290f, 1.956036588f, 2.129325857f, 2.302615229f, 2.475904495f,
	2.649193816f, 2.822483131f, 2.995772422f, 3.169061779f
};
*/
int	ganSquareTable [ 256 ] =
{
	0, 1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225, 256, 289, 324, 361, 400, 441, 484, 529, 576, 625,
	676, 729, 784, 841, 900, 961, 1024, 1089, 1156, 1225, 1296, 1369, 1444, 1521, 1600, 1681, 1764, 1849, 1936, 2025,
	2116, 2209, 2304, 2401, 2500, 2601, 2704, 2809, 2916, 3025, 3136, 3249, 3364, 3481, 3600, 3721, 3844, 3969, 4096,
	4225, 4356, 4489, 4624, 4761, 4900, 5041, 5184, 5329, 5476, 5625, 5776, 5929, 6084, 6241, 6400, 6561, 6724, 6889,
	7056, 7225, 7396, 7569, 7744, 7921, 8100, 8281, 8464, 8649, 8836, 9025, 9216, 9409, 9604, 9801, 10000, 10201, 10404,
	10609, 10816, 11025, 11236, 11449, 11664, 11881, 12100, 12321, 12544, 12769, 12996, 13225, 13456, 13689, 13924, 14161,
	14400, 14641, 14884, 15129, 15376, 15625, 15876, 16129, 16384, 16641, 16900, 17161, 17424, 17689, 17956, 18225, 18496,
	18769, 19044, 19321, 19600, 19881, 20164, 20449, 20736, 21025, 21316, 21609, 21904, 22201, 22500, 22801, 23104, 23409,
	23716, 24025, 24336, 24649, 24964, 25281, 25600, 25921, 26244, 26569, 26896, 27225, 27556, 27889, 28224, 28561, 28900,
	29241, 29584, 29929, 30276, 30625, 30976, 31329, 31684, 32041, 32400, 32761, 33124, 33489, 33856, 34225, 34596, 34969,
	35344, 35721, 36100, 36481, 36864, 37249, 37636, 38025, 38416, 38809, 39204, 39601, 40000, 40401, 40804, 41209, 41616,
	42025, 42436, 42849, 43264, 43681, 44100, 44521, 44944, 45369, 45796, 46225, 46656, 47089, 47524, 47961, 48400, 48841,
	49284, 49729, 50176, 50625, 51076, 51529, 51984, 52441, 52900, 53361, 53824, 54289, 54756, 55225, 55696, 56169, 56644,
	57121, 57600, 58081, 58564, 59049, 59536, 60025, 60516, 61009, 61504, 62001, 62500, 63001, 63504, 64009, 64516, 65025
};	

#endif // _ARMFACEDETECTORTABLE_H
